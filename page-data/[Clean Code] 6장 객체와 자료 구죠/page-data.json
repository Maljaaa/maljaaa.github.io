{"componentChunkName":"component---src-templates-blog-template-js","path":"/[Clean Code] 6장 객체와 자료 구죠/","result":{"data":{"cur":{"id":"d2e57b72-d352-581f-86a7-ca686b9cc6a5","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>변수를 <code class=\"language-text\">private</code>으로 정의하는 이유가 있다.<br>\n남들이 변수에 의존하지 않게 만들기 위해서다.<br>\n그렇다면 왜 많은 개발자들이 <code class=\"language-text\">get</code>함수와 <code class=\"language-text\">set</code>함수를 당연하게 <code class=\"language-text\">public</code>해 <code class=\"language-text\">private</code>변수를 외부에 노출할까?</p>\n<h3 id=\"자료-추상화\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%A3%8C-%EC%B6%94%EC%83%81%ED%99%94\" aria-label=\"자료 추상화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자료 추상화</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setCadrtesian</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getTheta</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setPolar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> theta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>더 나은 예시</p>\n</blockquote>\n<p>변수를 <strong>privat</strong>e으로 선언하더라도 각 값마다 <strong>get</strong>함수와 <strong>set</strong>함수를 제공한다면 구현을 외부로 노출하는 셈이다.<br>\n구현을 감추려면 <strong>추상화</strong>가 필요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vehicle</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getFuelTankCapacityInGallons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getGallonsOfGasoline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vehicle</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getPercentFuelRemaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>더 나은 예시</p>\n</blockquote>\n<p>인터페이스나 조회/설정 함수만으로는 추상화가 이뤄지지 않는다.<br>\n객체가 포함하는 자료를 표현할 가장 좋은 방법을 심각하게 고민해야 한다.</p>\n<h3 id=\"자료객체-비대칭\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%A3%8C%EA%B0%9D%EC%B2%B4-%EB%B9%84%EB%8C%80%EC%B9%AD\" aria-label=\"자료객체 비대칭 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자료/객체 비대칭</h3>\n<p>객체는 추상화 뒤로 자료를 숨긴 채 자료를 다루는 함수만 제공한다.<br>\n자료 구조는 자료를 그대로 공개하며 별다른 함수는 제공하지 않는다.</p>\n<ul>\n<li>절차 지향 코드의 장단점</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(자료 구조를 사용하는) 절차적인 코드는 기존 자료구조를 변경하지 않으면서\r\n새 함수를 추가하기 쉽다. 반면, 객체 지향 코드는 기존 함수를 변경하지 않으면서\r\n새 클래스를 추가하기 쉽다.</code></pre></div>\n<ul>\n<li>객체 지향 코드의 장단점</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">절차적인 코드는 새로운 자료 구조를 추가하기 어렵다. 그러려면 모든 함수를\r\n고쳐야 한다. 객체 지향 코드는 새로운 함수를 추가하기 어렵다.\r\n그러려면 모든 클래스를 고쳐야 한다.</code></pre></div>\n<p><strong>객체 지향 코드</strong>에서 어려운 변경은 절차 지향 코드에서 쉬우며,<br>\n<strong>절차 지향 코드</strong>에서 어려운 변경은 객체 지향 코드에서 쉽다!</p>\n<h3 id=\"디미터-법칙\" style=\"position:relative;\"><a href=\"#%EB%94%94%EB%AF%B8%ED%84%B0-%EB%B2%95%EC%B9%99\" aria-label=\"디미터 법칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디미터 법칙</h3>\n<p><strong>디미터 법칙</strong>은 잘 알려진 <strong>휴리스틱</strong>으로,<br>\n모듈은 자신이 조작하는 객체의 속사정을 몰라야 한다는 법칙이다.</p>\n<p>디미터 법칙은 <code class=\"language-text\">\"클래스 C의 매서드 f는 다음과 같은 객체의 매서드만 호출해야 한다\"</code>고 주장한다.</p>\n<ul>\n<li>클래스 C</li>\n<li>f가 생성한 객체</li>\n<li>f 인수로 넘어온 객체</li>\n<li>C 인스턴스 변수에 저장된 객체</li>\n</ul>\n<p>위 객체에서 허용된 매서드가 <code class=\"language-text\">반환</code>하는 객체의 매서드는 호출하면 안 된다.</p>\n<h4 id=\"기차-충돌\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%B0%A8-%EC%B6%A9%EB%8F%8C\" aria-label=\"기차 충돌 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기차 충돌</h4>\n<ul>\n<li>기차 충돌의 예</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> outputDir <span class=\"token operator\">=</span> ctxt<span class=\"token punctuation\">.</span><span class=\"token function\">getOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getScratchDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>해결</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Options</span> opts <span class=\"token operator\">=</span> ctxt<span class=\"token punctuation\">.</span><span class=\"token function\">getOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token class-name\">File</span> scratchDir <span class=\"token operator\">=</span> opts<span class=\"token punctuation\">.</span><span class=\"token function\">getScratchDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> outputDir <span class=\"token operator\">=</span> scratchDir<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>더 나은 방법</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> outputDir <span class=\"token operator\">=</span> ctxt<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>scratchDir<span class=\"token punctuation\">.</span>absolutePath<span class=\"token punctuation\">;</span></code></pre></div>\n<p>자료 구조는 무조건 함수 없이 공개 변수만 포함하고<br>\n객체는 비공개 변수와 공개 함수를 포함한다면, 문제는 간단하다.</p>\n<h4 id=\"잡종-구조\" style=\"position:relative;\"><a href=\"#%EC%9E%A1%EC%A2%85-%EA%B5%AC%EC%A1%B0\" aria-label=\"잡종 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>잡종 구조</h4>\n<p>절반은 객체, 절반은 자료 구조인 잡종 구조가 있다.<br>\n함수나 타입을 보호할지 공개할지 확신하지 못해 어중간하게 내놓은 설계에 불과하다.</p>\n<h4 id=\"구조체-감추기\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4-%EA%B0%90%EC%B6%94%EA%B8%B0\" aria-label=\"구조체 감추기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조체 감추기</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">ctxt<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePathOfScratchDirectoryOption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 1</span>\r\nctxt<span class=\"token punctuation\">.</span><span class=\"token function\">getScratchDirectoryOption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<p>1번은 객체에 공개해야 하는 매서드가 너무 많아진다.<br>\n2번은 객체가 아니라 자료 구조를 반환한다고 가정해도 별로다.</p>\n<p>ctxt가 객체라면 <code class=\"language-text\">뭔가를 하라고</code> 말해야지 속을 드러내라고 말하면 안된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> outFile <span class=\"token operator\">=</span> outputDir <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> className<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token char\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".class\"</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token class-name\">FileOutputStream</span> fout <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>outFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token class-name\">BufferedOutputstream</span> bos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedOutputStream</span><span class=\"token punctuation\">(</span>fout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>점, 슬래시, 파일확장자, File 객체를 부주의하게 마구 뒤섞으면 안된다.<br>\n그럼에도 코드를 보면, 임시 파일을 생성하기 위해 임시 디렉터리의 절대 경로를 얻으려고 하는 것을 알 수 있다.<br>\n그렇다면 ctxt 객체에 임시 파일을 생성하라고 한다면?</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">BufferedOutputStream</span> bos <span class=\"token operator\">=</span> ctxt<span class=\"token punctuation\">.</span><span class=\"token function\">createScratchFileStream</span><span class=\"token punctuation\">(</span>classFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>객체에 맡기기에 적당한 임무로 보인다.<br>\nctxt는 내부 구조를 드러내지 않으며, 모듈에서 해당 함수는 자신이 몰라야 하는 여러 객체를 탐색할 필요가 없다.<br>\n따라서 디미터 법칙을 위반하지 않는다.</p>\n<h3 id=\"자료-전달-객체\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%A3%8C-%EC%A0%84%EB%8B%AC-%EA%B0%9D%EC%B2%B4\" aria-label=\"자료 전달 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자료 전달 객체</h3>\n<p>자료 전달 객체는 <code class=\"language-text\">DTO(Data Transfer Object)</code>이다.<br>\n공개 변수만 있고 함수가 없는 클래스다.<br>\nDB에 저장된 가공되지 않은 정보를\r\n애플리케이션 코드에서 사용할 객체로 변환하는 일련의 단계에서<br>\n가장 처음으로 사용하는 구조체다.<br>\n좀 더 일반적인 형태는 <code class=\"language-text\">빈(Bean)</code>구조다.</p>\n<h4 id=\"활성-레코드\" style=\"position:relative;\"><a href=\"#%ED%99%9C%EC%84%B1-%EB%A0%88%EC%BD%94%EB%93%9C\" aria-label=\"활성 레코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>활성 레코드</h4>\n<p>활성 레코드는 DTO의 특수한 형태다.<br>\n공개 변수가 있거나 비공개 변수에 조회/설정 함수가 있는 자료 구조지만,<br>\n대개 save나 find와 같은 탐색 함수도 제공한다.</p>\n<p>활성 레코드에 비즈니스 규칙 메서드를 추가해, 이런 자료 구조를 객체로 취급하는 것은<br>\n바람직하지 않다.</p>\n<p>활성 레코드를 자료 구조로 취급하고,<br>\n비즈니스 규칙을 담으면서 내부 자료를 숨기는 객체는 따로 생성한다.<br>\n(여기서 내부 자료는 활성 레코드의 인스턴스일 가능성이 높다.)</p>\n<h3 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h3>\n<ul>\n<li><strong>객체</strong></li>\n</ul>\n<ol>\n<li>동작을 공개하고 자료를 숨긴다.</li>\n<li>기존 동작을 변경하지 않으면서 새 객체 타입을 추가하기는 쉽다.</li>\n<li>기존 객체에 새 동작을 추가하기는 어렵다.</li>\n</ol>\n<ul>\n<li><strong>자료 구조</strong></li>\n</ul>\n<ol>\n<li>별다른 동작 없이 자료를 노출한다.</li>\n<li>새 동작을 추가하기 쉽다.</li>\n<li>기존 함수에 새 자료 구조를 추가하기 어렵다.</li>\n</ol>","excerpt":"Intro 변수를 으로 정의하는 이유가 있다. 남들이 변수에 의존하지 않게 만들기 위해서다. 그렇다면 왜 많은 개발자들이 함수와 함수를 당연하게 해 변수를 외부에 노출할까? 자료 추상화 더 나은 예시 변수를 private으로 선언하더라도 각 값마다 get함수와 set함수를 제공한다면 구현을 외부로 노출하는 셈이다. 구현을 감추려면 추상화가 필요하다. 더 나은 예시 인터페이스나 조회/설정 함수만으로는 추상화가 이뤄지지 않는다. 객체가 포함하는 자료를 표현할 가장 좋은 방법을 심각하게 고민해야 한다. 자료/객체 비대칭 객체는 추상화 뒤로 자료를 숨긴 채 자료를 다루는 함수만 제공한다. 자료 구조는 자료를 그대로 공개하며 별다른 함수는 제공하지 않는다. 절차 지향 코드의 장단점 객체 지향 코드의 장단점 객체 지향 코드에서 어려운 변경은 절차 지향 코드에서 쉬우며, 절차 지향 코드에서 어려운 변경은 객체 지향 코드에서 쉽다! 디미터 법칙 디미터 법칙은 잘 알려진 휴리스틱으로, 모듈은 자신…","frontmatter":{"date":"September 04, 2024","title":"6장 객체와 자료 구조","categories":"Clean_Code","author":"신승민","emoji":"🤖"},"fields":{"slug":"/[Clean Code] 6장 객체와 자료 구죠/"}},"next":{"id":"703db23a-f43d-5ff7-b771-809fa6de8a3b","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>깔끔하게 형식을 맞춰 코드를 짜야한다.<br>\n간단한 규칙을 정하고, 그 규칙을 착실히 따라야 한다.<br>\n팀으로 일한다면 팀 규칙을 따라야 한다.<br>\n필요하다면 도구도 활용하자.</p>\n<h3 id=\"형식을-맞추는-목적\" style=\"position:relative;\"><a href=\"#%ED%98%95%EC%8B%9D%EC%9D%84-%EB%A7%9E%EC%B6%94%EB%8A%94-%EB%AA%A9%EC%A0%81\" aria-label=\"형식을 맞추는 목적 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>형식을 맞추는 목적</h3>\n<p>오늘 구현한 코드의 가독성은 앞으로 바뀔 코드의 품질에 지대한 영향을 미친다.<br>\n맨 처음 잡아놓는 구현 스타일과 가독성 수준은 유지보수 용이성과 확장성에 계속 영향을 미친다.<br>\n원래 코드는 사라질지라도 개발자의 스타일과 규율은 사라지지 않는다.</p>\n<h3 id=\"적절한-행-길이를-유지하라\" style=\"position:relative;\"><a href=\"#%EC%A0%81%EC%A0%88%ED%95%9C-%ED%96%89-%EA%B8%B8%EC%9D%B4%EB%A5%BC-%EC%9C%A0%EC%A7%80%ED%95%98%EB%9D%BC\" aria-label=\"적절한 행 길이를 유지하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>적절한 행 길이를 유지하라</h3>\n<p>소스 코드는 얼마나 길어야 적당할까? 라는 질문에 이렇게 답한다.<br>\n500줄을 넘지 않고 대부분 <strong>200줄</strong> 정도인 파일로도 커다란 시스템을 구축할 수 있다.</p>\n<h4 id=\"신문-기사처럼-작성하라\" style=\"position:relative;\"><a href=\"#%EC%8B%A0%EB%AC%B8-%EA%B8%B0%EC%82%AC%EC%B2%98%EB%9F%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%9D%BC\" aria-label=\"신문 기사처럼 작성하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>신문 기사처럼 작성하라</h4>\n<p>이름은 간단하면서도 설명이 가능하게 짓는다.<br>\n첫 부분은 고차원 개념과 알고리즘을 설명한다.<br>\n아래로 내려갈수록 세세하게 묘사한다.<br>\n마지막에는 가장 저차원 함수와 세부 내역이 나온다.</p>\n<h4 id=\"개념은-빈-행으로-분리하라\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%85%90%EC%9D%80-%EB%B9%88-%ED%96%89%EC%9C%BC%EB%A1%9C-%EB%B6%84%EB%A6%AC%ED%95%98%EB%9D%BC\" aria-label=\"개념은 빈 행으로 분리하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개념은 빈 행으로 분리하라</h4>\n<p>생각 사이는 빈 행을 넣어 분리하자.<br>\n행 묶음이 분리되어 보이면 되겠다.</p>\n<h4 id=\"세로-밀집도\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EB%A1%9C-%EB%B0%80%EC%A7%91%EB%8F%84\" aria-label=\"세로 밀집도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세로 밀집도</h4>\n<p>서로 밀접한 코드 행은 세로로 가까이 놓여야 한다.<br>\n굳이 떨어뜨려 놓을 필요가 없다.</p>\n<h4 id=\"수직-거리\" style=\"position:relative;\"><a href=\"#%EC%88%98%EC%A7%81-%EA%B1%B0%EB%A6%AC\" aria-label=\"수직 거리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>수직 거리</h4>\n<p>이 조각 저 조각이 어디에 있는지 찾고 기억하느라 시간과 노력을 소모한다.<br>\n그러므로 서로 밀접한 개념은 한 파일에 속해야 마땅하다.<br>\n이게 바로 <code class=\"language-text\">protected</code>변수를 피해야 하는 이유 중 하나다.</p>\n<h3 id=\"변수-선언\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8\" aria-label=\"변수 선언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수 선언</h3>\n<ul>\n<li>변수는 사용하는 위치에 최대한 가까이 선언한다.</li>\n</ul>\n<blockquote>\n<p>이렇게 되면 for문 안에 변수를 선언하게 되는데,<br>\n그럼 인스턴스를 계속 생성해서 성능이 저하되지 않을까?</p>\n</blockquote>\n<h3 id=\"인스턴스-변수\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%B3%80%EC%88%98\" aria-label=\"인스턴스 변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인스턴스 변수</h3>\n<ul>\n<li>인스턴스 변수는 클래스 맨 처음에 선언한다.</li>\n</ul>\n<p>자바에서는 보통 클래스 맨 처음에 인스턴스 변수를 선언한다.</p>\n<blockquote>\n<p>위에서 한 고민 해결:)</p>\n</blockquote>\n<h3 id=\"종속-함수\" style=\"position:relative;\"><a href=\"#%EC%A2%85%EC%86%8D-%ED%95%A8%EC%88%98\" aria-label=\"종속 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>종속 함수</h3>\n<ul>\n<li>한 함수가 다른 함수를 호출한다면 두 함수는 세로로 가까이 배치한다.</li>\n<li>또한 가능하다면 <strong>호출하는 함수</strong>를 <strong>호출되는 함수</strong>보다 먼저 배치한다.</li>\n</ul>\n<p>상수를 알아야 마땅한 함수에서 실제로 사용하는 함수로 상수를 넘겨주는 방법이 더 좋다.</p>\n<h3 id=\"개념적-유사성\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%85%90%EC%A0%81-%EC%9C%A0%EC%82%AC%EC%84%B1\" aria-label=\"개념적 유사성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개념적 유사성</h3>\n<ul>\n<li>친화도가 높을수록 코드를 <strong>가까이 배치</strong>한다.</li>\n</ul>\n<blockquote>\n<p>친화도가 높은 요인 예시 : 한 함수가 다른 함수를 호출해 생기는 직접적인 종속성, 변수와 그 변수를 사용하는 함수, 비슷한 동작을 수행하는 일군의 함수</p>\n</blockquote>\n<h4 id=\"세로-순서\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EB%A1%9C-%EC%88%9C%EC%84%9C\" aria-label=\"세로 순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세로 순서</h4>\n<p>가장 중요한 개념을 가장 먼저 표현한다.<br>\n세세한 사항은 가장 마지막에 표현한다.</p>\n<h3 id=\"가로-형식-맞추기\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%A1%9C-%ED%98%95%EC%8B%9D-%EB%A7%9E%EC%B6%94%EA%B8%B0\" aria-label=\"가로 형식 맞추기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가로 형식 맞추기</h3>\n<p>한 행은 가로로 얼마나 길어야 적당할까? 라는 질문에 이렇게 답한다.<br>\n10자 미만은 30%, 20자에서 60자 사이는 40%, 80자 이후부터 행 수는 급격하게 감소한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"프로그래머는 명백하게 짧은 행을 선호한다.\"</code></pre></div>\n<p>개인적으로 저자는 <strong>120자</strong> 정도로 행 길이를 제한한다.</p>\n<h4 id=\"가로-공백과-밀집도\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%A1%9C-%EA%B3%B5%EB%B0%B1%EA%B3%BC-%EB%B0%80%EC%A7%91%EB%8F%84\" aria-label=\"가로 공백과 밀집도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가로 공백과 밀집도</h4>\n<ul>\n<li>함수와 인수 사이에 공백을 두지 않는다.</li>\n<li>연산자 우선순위에 따라 공백을 정한다.(곱셈, 승수 -> 공백 x / 덧셈, 뺄셈 -> 공백 O)</li>\n</ul>\n<h4 id=\"가로-정렬\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%A1%9C-%EC%A0%95%EB%A0%AC\" aria-label=\"가로 정렬 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가로 정렬</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Socket</span> socket<span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span>   requestparsingDeadline<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이런 정렬은 유용하지 못하다.</p>\n<p>정렬하지 않으면 오히려 중대한 결함을 찾기 쉽다.<br>\n정렬이 필요할 정도로 목록이 길다면 문제는 목록 길이지 정렬 부족이 아니다.</p>\n<ul>\n<li>선언부가 길다면 <strong>클래스</strong>를 쪼개야 한다.</li>\n</ul>\n<h4 id=\"들여쓰기\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%97%AC%EC%93%B0%EA%B8%B0\" aria-label=\"들여쓰기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들여쓰기</h4>\n<ul>\n<li>들여쓰기한 파일은 구조가 한눈에 들어온다.</li>\n<li>변수, 생성자 함수, 접근자 함수, 메서드가 금방 보인다.</li>\n</ul>\n<h3 id=\"들여쓰기-무시하기\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%97%AC%EC%93%B0%EA%B8%B0-%EB%AC%B4%EC%8B%9C%ED%95%98%EA%B8%B0\" aria-label=\"들여쓰기 무시하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들여쓰기 무시하기</h3>\n<p>간단한 if문, 짧은 while문, 짧은 함수에서 들여쓰기 규칙을 무시하고픈 유혹이 생긴다.</p>\n<blockquote>\n<p>난 안 생긴다…</p>\n</blockquote>\n<h4 id=\"가짜-범위\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%A7%9C-%EB%B2%94%EC%9C%84\" aria-label=\"가짜 범위 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가짜 범위</h4>\n<p>빈 while문이나 for문을 피하지 못할 때는 빈 블록을 오라볼 들여쓰고 괄호로 감싼다.</p>\n<ul>\n<li>세미콜론(;)은 새 행에다 제대로 들여써서 넣어준다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>dis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> readbufferSize<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"팀-규칙\" style=\"position:relative;\"><a href=\"#%ED%8C%80-%EA%B7%9C%EC%B9%99\" aria-label=\"팀 규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>팀 규칙</h3>\n<p>읽기 쉬운 문서를 만들기 위해서는 스타일이 일관적이고 매끄러워야 한다.<br>\n독자에게 신뢰감을 주어서 복잡하지 않게 하자.</p>\n<h3 id=\"밥-아저씨의-형식-규칙\" style=\"position:relative;\"><a href=\"#%EB%B0%A5-%EC%95%84%EC%A0%80%EC%94%A8%EC%9D%98-%ED%98%95%EC%8B%9D-%EA%B7%9C%EC%B9%99\" aria-label=\"밥 아저씨의 형식 규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>밥 아저씨의 형식 규칙</h3>\n<p>목록 5-6에 잘 드러난다.<br>\n개인적으로 무척이나 아름답다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#intro\">Intro</a></p>\n<ul>\n<li>\n<p><a href=\"#%ED%98%95%EC%8B%9D%EC%9D%84-%EB%A7%9E%EC%B6%94%EB%8A%94-%EB%AA%A9%EC%A0%81\">형식을 맞추는 목적</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A0%81%EC%A0%88%ED%95%9C-%ED%96%89-%EA%B8%B8%EC%9D%B4%EB%A5%BC-%EC%9C%A0%EC%A7%80%ED%95%98%EB%9D%BC\">적절한 행 길이를 유지하라</a></p>\n<ul>\n<li><a href=\"#%EC%8B%A0%EB%AC%B8-%EA%B8%B0%EC%82%AC%EC%B2%98%EB%9F%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%9D%BC\">신문 기사처럼 작성하라</a></li>\n<li><a href=\"#%EA%B0%9C%EB%85%90%EC%9D%80-%EB%B9%88-%ED%96%89%EC%9C%BC%EB%A1%9C-%EB%B6%84%EB%A6%AC%ED%95%98%EB%9D%BC\">개념은 빈 행으로 분리하라</a></li>\n<li><a href=\"#%EC%84%B8%EB%A1%9C-%EB%B0%80%EC%A7%91%EB%8F%84\">세로 밀집도</a></li>\n<li><a href=\"#%EC%88%98%EC%A7%81-%EA%B1%B0%EB%A6%AC\">수직 거리</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8\">변수 선언</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%B3%80%EC%88%98\">인스턴스 변수</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A2%85%EC%86%8D-%ED%95%A8%EC%88%98\">종속 함수</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B0%9C%EB%85%90%EC%A0%81-%EC%9C%A0%EC%82%AC%EC%84%B1\">개념적 유사성</a></p>\n<ul>\n<li><a href=\"#%EC%84%B8%EB%A1%9C-%EC%88%9C%EC%84%9C\">세로 순서</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B0%80%EB%A1%9C-%ED%98%95%EC%8B%9D-%EB%A7%9E%EC%B6%94%EA%B8%B0\">가로 형식 맞추기</a></p>\n<ul>\n<li><a href=\"#%EA%B0%80%EB%A1%9C-%EA%B3%B5%EB%B0%B1%EA%B3%BC-%EB%B0%80%EC%A7%91%EB%8F%84\">가로 공백과 밀집도</a></li>\n<li><a href=\"#%EA%B0%80%EB%A1%9C-%EC%A0%95%EB%A0%AC\">가로 정렬</a></li>\n<li><a href=\"#%EB%93%A4%EC%97%AC%EC%93%B0%EA%B8%B0\">들여쓰기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%93%A4%EC%97%AC%EC%93%B0%EA%B8%B0-%EB%AC%B4%EC%8B%9C%ED%95%98%EA%B8%B0\">들여쓰기 무시하기</a></p>\n<ul>\n<li><a href=\"#%EA%B0%80%EC%A7%9C-%EB%B2%94%EC%9C%84\">가짜 범위</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%8C%80-%EA%B7%9C%EC%B9%99\">팀 규칙</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%B0%A5-%EC%95%84%EC%A0%80%EC%94%A8%EC%9D%98-%ED%98%95%EC%8B%9D-%EA%B7%9C%EC%B9%99\">밥 아저씨의 형식 규칙</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 03, 2024","title":"5장 형식 맞추기","categories":"Clean_Code","author":"신승민","emoji":"💩"},"fields":{"slug":"/[Clean Code] 5장 형식 맞추기/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://maljaaa.github.io","comments":{"utterances":{"repo":"maljaaa/maljaaa.github.io"}}}}},"pageContext":{"slug":"/[Clean Code] 6장 객체와 자료 구죠/","nextSlug":"/[Clean Code] 5장 형식 맞추기/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}