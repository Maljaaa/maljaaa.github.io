{"componentChunkName":"component---src-templates-blog-template-js","path":"/[Clean Code] 4장 주석/","result":{"data":{"cur":{"id":"22cd5d55-bdc5-537b-8b3c-76a5d57c0428","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"나쁜 코드에 주석을 달지 마라. 새로 짜라.\"\r\n- 브라이언 w. 커니핸, P.J.플라우거 -</code></pre></div>\n<p>코드로 의도를 표현하지 못했을 때, 즉 실패했을 때 우리는 주석을 사용한다.<br>\n하지만 주석은 프로그래머들이 유지보수하기는 현실적으로 불가능하다.<br>\n따라서 우리는 주석이(간혹 필요할지라도) 필요 없는 방향으로 애너지를 쏟아야 한다.</p>\n<h3 id=\"주석은-나쁜-코드를-보완하지-못한다\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%84%9D%EC%9D%80-%EB%82%98%EC%81%9C-%EC%BD%94%EB%93%9C%EB%A5%BC-%EB%B3%B4%EC%99%84%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%9C%EB%8B%A4\" aria-label=\"주석은 나쁜 코드를 보완하지 못한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주석은 나쁜 코드를 보완하지 못한다</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">표현력이 풍부하고 깔끔하며 주석이 거의 없는 코드가, 복잡하고 어수선하며 주석이 많이 달린 코드보다 훨씬 좋다. \r\n자신이 저지른 난장판을 주석으로 설명하려 애쓰는 대신에 그 난장판을 깨끗이 치우는 데 시간을 보내라!</code></pre></div>\n<h3 id=\"코드로-의도를-표현하라\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EB%A1%9C-%EC%9D%98%EB%8F%84%EB%A5%BC-%ED%91%9C%ED%98%84%ED%95%98%EB%9D%BC\" aria-label=\"코드로 의도를 표현하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드로 의도를 표현하라!</h3>\n<ul>\n<li>주석으로 의도를 표현한 경우</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 직원에게 복지 혜택을 받을 자격이 있는지 검사한다.</span>\r\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>employee<span class=\"token punctuation\">.</span>flags <span class=\"token operator\">&amp;</span> <span class=\"token constant\">HOURLY_FLAG</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>employee<span class=\"token punctuation\">.</span>age <span class=\"token operator\">></span> <span class=\"token number\">65</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>코드로 의도를 표현한 경우</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>employee<span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span><span class=\"token function\">isEligibleForFullBenefits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>주석으로 달려는 설명을 함수로 만들어 표현해도 충분하다.</p>\n<h3 id=\"좋은-주석\" style=\"position:relative;\"><a href=\"#%EC%A2%8B%EC%9D%80-%EC%A3%BC%EC%84%9D\" aria-label=\"좋은 주석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>좋은 주석</h3>\n<p><strong>1) 법적인 주석</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Copyright (C) ...</span></code></pre></div>\n<p><strong>2) 정보를 제공하는 주석</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// kk:mm:ss EEE, MMM dd, yyyy 형식이다. </span>\r\n<span class=\"token class-name\">Pattern</span> timeMatcher <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\d*:\\\\d*:\\\\d* \\\\w*, \\\\w* \\\\d*, \\\\d*\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이왕이면 시각과 날짜를 변환하는 클래스를 만들어 코드를 옮겨주면 더 좋고 더 깔끔하겠다.</p>\n<p><strong>3) 의도를 설명하는 주석</strong></p>\n<ul>\n<li>구현을 이해하게 도와주는 선을 넘어 결정에 깔린 의도까지 설명할 수 있다.</li>\n</ul>\n<p><strong>4) 의미를 명료하게 밝히는 주석</strong></p>\n<ul>\n<li>테스트 코드에서 사용할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// a == a</span></code></pre></div>\n<p><strong>5) 결과를 경고하는 주석</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SimpleDateFormat</span> <span class=\"token function\">makeStanadardHttpDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// SimpledateFormat은 스레드에 안전하지 못하다.</span>\r\n    <span class=\"token comment\">// 따라서 각 인스턴스를 독립적으로 생성해야 한다.</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>프로그램 효율을 높이기 위해 정적 초기화 함수를 사용하려던 열성적인 프로그래머가 주석 때문에 실수를 면한다.</li>\n</ul>\n<p><strong>6) TODO 주석</strong></p>\n<ul>\n<li>앞으로 할 일에 대한 주석</li>\n</ul>\n<p><strong>7) 중요성을 강조하는 주석</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 여기서 trim은 정말 중요하다. trim 함수는 문자열에서 시작 공백을 제거한다. </span></code></pre></div>\n<p><strong>8) 공개 API에서 Javadocs</strong>\r\nJavadocs가 없다면 자바 프로그램을 짜기가 아주 어려우리라.</p>\n<h3 id=\"나쁜-주석\" style=\"position:relative;\"><a href=\"#%EB%82%98%EC%81%9C-%EC%A3%BC%EC%84%9D\" aria-label=\"나쁜 주석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>나쁜 주석</h3>\n<p><strong>1) 주절거리는 주석</strong></p>\n<p><strong>2) 같은 이야기를 중복하는 주석</strong></p>\n<p><strong>3) 오해할 여지가 있는 주석</strong></p>\n<p><strong>4) 의무적으로 다는 주석</strong>\r\n모든 함수에 Javadocs를 넣으라는 규칙?</p>\n<p><strong>5) 이력을 기록하는 주석</strong></p>\n<ul>\n<li>지금은 소스 코드 관리 시스템이 있다.</li>\n</ul>\n<p><strong>6) 있으나 마나 한 주석</strong></p>\n<p><strong>7) 무서운 잡음</strong></p>\n<p><strong>8) 함수나 변수로 표현할 수 있다면 주석을 달지 마라</strong></p>\n<p><strong>9) 위치를 표시하는 주석</strong></p>\n<p><strong>10) 닫는 괄호에 다는 주석</strong></p>\n<p><strong>11) 공로를 돌리거나 저자를 표시하는 주석</strong></p>\n<ul>\n<li>요즘 IDE에 기능이 있다.</li>\n</ul>\n<p><strong>12) 주석으로 처리한 코드</strong></p>\n<p><strong>13) HTML 주석</strong></p>\n<p><strong>14) 전역 정보</strong></p>\n<ul>\n<li>포트 기본값을 알려준다던지 등등.. 주석을 달아야 한다면 근처에 있는 코드만 기술하자.</li>\n</ul>\n<p><strong>15) 너무 많은 정보</strong></p>\n<p><strong>16) 모호한 관계</strong></p>\n<ul>\n<li>주석과 주석이 설명하는 코드는 둘 사이 관계가 명백해야 한다.</li>\n<li>코드만으로 설명이 부족하여 주석을 달았는데, 주석 또한 부족하다면…</li>\n</ul>\n<p><strong>17) 함수 헤더</strong></p>\n<ul>\n<li>함수 이름을 잘 짓자.</li>\n</ul>\n<p><strong>18) 비공개 코드에서 Javadocs</strong></p>\n<h3 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h3>\n<p>주석을 왜 써야하며, 언제 써야하는지를 알고 쓰는 것이 좋겠다.<br>\n좋은 주석을 써야하는 상황과 이유를 아는 것도 좋지만,<br>\n나쁜 주석을 인지하고 있는 상태에서 코드와 주석을 단다면<br>\n클린 코드로 가는 길이 더 빨라질 것만 같다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#intro\">Intro</a></p>\n<ul>\n<li><a href=\"#%EC%A3%BC%EC%84%9D%EC%9D%80-%EB%82%98%EC%81%9C-%EC%BD%94%EB%93%9C%EB%A5%BC-%EB%B3%B4%EC%99%84%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%9C%EB%8B%A4\">주석은 나쁜 코드를 보완하지 못한다</a></li>\n<li><a href=\"#%EC%BD%94%EB%93%9C%EB%A1%9C-%EC%9D%98%EB%8F%84%EB%A5%BC-%ED%91%9C%ED%98%84%ED%95%98%EB%9D%BC\">코드로 의도를 표현하라!</a></li>\n<li><a href=\"#%EC%A2%8B%EC%9D%80-%EC%A3%BC%EC%84%9D\">좋은 주석</a></li>\n<li><a href=\"#%EB%82%98%EC%81%9C-%EC%A3%BC%EC%84%9D\">나쁜 주석</a></li>\n<li><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"Intro 코드로 의도를 표현하지 못했을 때, 즉 실패했을 때 우리는 주석을 사용한다. 하지만 주석은 프로그래머들이 유지보수하기는 현실적으로 불가능하다. 따라서 우리는 주석이(간혹 필요할지라도) 필요 없는 방향으로 애너지를 쏟아야 한다. 주석은 나쁜 코드를 보완하지 못한다 코드로 의도를 표현하라! 주석으로 의도를 표현한 경우 코드로 의도를 표현한 경우 주석으로 달려는 설명을 함수로 만들어 표현해도 충분하다. 좋은 주석 1) 법적인 주석 2) 정보를 제공하는 주석 이왕이면 시각과 날짜를 변환하는 클래스를 만들어 코드를 옮겨주면 더 좋고 더 깔끔하겠다. 3) 의도를 설명하는 주석 구현을 이해하게 도와주는 선을 넘어 결정에 깔린 의도까지 설명할 수 있다. 4) 의미를 명료하게 밝히는 주석 테스트 코드에서 사용할 수 있다. 5) 결과를 경고하는 주석 프로그램 효율을 높이기 위해 정적 초기화 함수를 사용하려던 열성적인 프로그래머가 주석 때문에 실수를 면한다. 6) TODO 주석 앞으로 할 …","frontmatter":{"date":"September 02, 2024","title":"4장 주석","categories":"Clean_Code","author":"신승민","emoji":"🐷"},"fields":{"slug":"/[Clean Code] 4장 주석/"}},"next":{"id":"7338da3f-242d-511b-bb5a-c64a2bbe6112","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>추상화 수준이 너무 다양하고 코드가 길다.<br>\n두 겹으로 중첩된 if문은 이상한 플래그를 확인하고, 이상한 문자열을 사용하며, 이상한 함수를 호출한다.<br>\n코드를 이해하기가 어렵다.<br>\n하지만 매서드 몇 개를 추출하고, 이름 몇 개를 변경하고, 구조를 조금 변경하면 파악하기 어려웠던 정보가 쉽게 드러난다.</p>\n<h3 id=\"작게-만들어라\" style=\"position:relative;\"><a href=\"#%EC%9E%91%EA%B2%8C-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%9D%BC\" aria-label=\"작게 만들어라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>작게 만들어라</h3>\n<p>100줄 ~ 300줄 함수도 있고 20줄 ~ 30줄 함수도 있다.<br>\n최대한 작으면 작을 수록 좋다.<br>\n심지어 2줄 ~ 4줄인 함수도 있다.<br>\n줄일 수 있다면 줄이는게 좋다.</p>\n<ul>\n<li>블록과 들여쓰기\n<ul>\n<li>if문 / else문 / while 문 등에 들어가는 블록은 한 줄이어야 한다. -> 대개 여기서 함수를 호출한다</li>\n<li>함수에서 들여쓰기 수준은 1단이나 2단을 넘어서면 안 된다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"한-가지만-해라\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EA%B0%80%EC%A7%80%EB%A7%8C-%ED%95%B4%EB%9D%BC\" aria-label=\"한 가지만 해라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 가지만 해라!</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"함수는 한 가지를 해야 한다. 그 한 가지를 잘 해야 한다. 그 한 가지만을 해야 한다.\"</code></pre></div>\n<p>우리가 함수를 만드는 이유는 큰 개념을 다음 추상화 수준에서 여러 단계로 나눠 수행하기 위해서이다.<br>\n그렇기 때문에 단순히 다른 표현이 아니라 의미 있는 이름으로 <strong>다른 함수</strong>를 추출할 수 있다면,<br>\n그 함수는 <strong>여러 작업</strong>을 하는 셈이다.</p>\n<h3 id=\"함수당-추상화-수준은-하나로\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EB%8B%B9-%EC%B6%94%EC%83%81%ED%99%94-%EC%88%98%EC%A4%80%EC%9D%80-%ED%95%98%EB%82%98%EB%A1%9C\" aria-label=\"함수당 추상화 수준은 하나로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수당 추상화 수준은 하나로!</h3>\n<p>함수가 확실히 ‘한 가지’ 작업만 하려면 함수 내 모든 문장의 추상화 수준이 동일해야 한다.</p>\n<ul>\n<li>위에서 아래로 코드 읽기 : <strong>내려가기</strong> 규칙\n<ul>\n<li>위에서 아래로 프로그램을 읽으면 함수 추상화 수준이 한 번에 한 단계씩 낮아진다.</li>\n</ul>\n</li>\n</ul>\n<p>추상화 수준이 하나인 함수를 구현하는게 쉽지 않겠지만 매우 중요한 규칙이다.</p>\n<h3 id=\"switch문\" style=\"position:relative;\"><a href=\"#switch%EB%AC%B8\" aria-label=\"switch문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Switch문</h3>\n<p>5가지 문제가 있다.</p>\n<ol>\n<li>함수가 길다.</li>\n<li>‘한 가지’ 작업만 수행하지 않는다.</li>\n<li>SRP(Single Responsibility Principle) - 코드를 변경할 이유가 여럿이기 때문</li>\n<li>OCP(Open Closed Principle) - 새 직원을 추가할 때마다 코드를 변경하기 때문</li>\n<li>구조가 동일한 함수가 무한정 존재</li>\n</ol>\n<p><strong>[ 해결 방법 ]</strong></p>\n<p>다형성을 이용하여 switch문을 저차원 클래스에 숨기고 절대로 반복하지 않는 방법이 있다.<br>\nswitch문을 추상 팩토리에 숨기고, 팩토리는 switch문을 사용해 적절한 파생 클래스의 인스턴스를 생성한다.<br>\n다른 함수들은 인터페이스를 거쳐서 호출된다.<br>\n그러면 다형성으로 인해 실제 파생 클래스의 함수가 실행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPayday</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">Money</span> <span class=\"token function\">calculatePay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deliverPay</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Money</span> pay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">EmployeeFactory</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span> <span class=\"token function\">makeEmployee</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EmployeeRecord</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InvalidEmployeeType</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeFactoryImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">EmployeeFactory</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span> <span class=\"token function\">makeEmployee</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EmployeeRecord</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InvalidEmployeeType</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">case</span> <span class=\"token constant\">COMMISIONED</span><span class=\"token operator\">:</span>\r\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CommisionedEmployee</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">case</span> <span class=\"token constant\">HOURLY</span><span class=\"token operator\">:</span>\r\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HourlyEmployee</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">case</span> <span class=\"token constant\">SALARIED</span><span class=\"token operator\">:</span>\r\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SalariedEmployee</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\r\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidEmployeeType</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"서술적인-이름을-사용하라\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EC%88%A0%EC%A0%81%EC%9D%B8-%EC%9D%B4%EB%A6%84%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\"서술적인 이름을 사용하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서술적인 이름을 사용하라!</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"코드를 읽으면서 짐작했던 기능을 각 루틴이 그대로 수행한다면 깨끗한 코드라 불러도 되겠다.\"</code></pre></div>\n<p>이름이 길어도 괜찮다.<br>\n길고 서술적인 이름이 짧고 어려운 이름보다 좋다.<br>\n길고 서술적인 이름이 길고 서술적인 주석보다 좋다.</p>\n<h3 id=\"함수-인수\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%EC%9D%B8%EC%88%98\" aria-label=\"함수 인수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 인수</h3>\n<p>😊 0개 -------------------------------- 4개 이상 😞<br>\n인수가 있으면 함수 이름과 인수 사이에 추상화 수준이 다르기 때문에<br>\n코드를 읽는 사람이 이해하기 어렵다.</p>\n<ul>\n<li>많이 쓰는 단항 형식\n<ul>\n<li>인수에 질문을 던지는 경우(boolean fileExists(“MyFile”))</li>\n<li>인수를 뭔가로 변환해 결과를 반환하는 경우(InputStream fileOpen(“MyFile”))</li>\n</ul>\n</li>\n<li>플래그 인수\n<ul>\n<li>함수로 부울 값을 넘기는 관례는 정말 끔찍하다.</li>\n</ul>\n</li>\n<li>이항 함수\n<ul>\n<li>인수가 1개인 함수보다 이해하기 어렵다.</li>\n<li>Point p = new Point(0, 0); 이런 경우엔 적절하다.</li>\n</ul>\n</li>\n<li>삼항 함수\n<ul>\n<li>인수가 2개인 함수보다 이해하기 어렵다.</li>\n<li>매번 함수를 볼 때마다 주춤해진다.</li>\n</ul>\n</li>\n<li>인수 객체\n<ul>\n<li>객체를 생성해 인수를 줄이는 방법 (Circle makeCircle(double x, double y, double radius) &#x26;&#x26; Circle makeCircle(Point center, double radius))</li>\n</ul>\n</li>\n<li>인수 목록\n<ul>\n<li>인수 개수가 가변적인 함수도 필요하다.</li>\n<li>String.format(“%s worked %.2f hours.”, name, hours);</li>\n</ul>\n</li>\n<li>동사와 키워드\n<ul>\n<li>함수의 의도나 인수의 순서와 의도를 제대로 표현하려면 좋은 함수 이름은 필수.</li>\n<li>인수가 동사/명사 쌍을 이뤄야 한다.</li>\n<li>함수 이름에 키워드를 추가하는 방법도 있다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"부수-효과를-일으키지-마라\" style=\"position:relative;\"><a href=\"#%EB%B6%80%EC%88%98-%ED%9A%A8%EA%B3%BC%EB%A5%BC-%EC%9D%BC%EC%9C%BC%ED%82%A4%EC%A7%80-%EB%A7%88%EB%9D%BC\" aria-label=\"부수 효과를 일으키지 마라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>부수 효과를 일으키지 마라!</h3>\n<p>부수 효과는 거짓말이다.<br>\n시간적인 결합(temporal coupling) 이나 순서 종속성(order dependency)을 초래한다.</p>\n<p><code class=\"language-text\">public boolean checkPassword(String userName, String password){}</code>이라는 함수가 있다.<br>\n함수 이름만 봐서는 암호를 확인하는 함수다.<br>\n하지만 Session.initialize() 호출이 있다.<br>\n이름만 봐서는 세션을 초기화한다는 사실이 드러나지 않는다.</p>\n<ul>\n<li>출력 인수<br>\n<code class=\"language-text\">appendFooter(s);</code><br>\n이 함수에서 인수 s는 입력일까 출력일까?<br>\n함수 선언부를 찾아보면 분명해진다.<br>\n<code class=\"language-text\">public void appendFooter(StringBuffer report)</code><br>\n인수 s는 출력 인수지만, 이렇게 찾아보는 것은 인지적으로 거슬린다는 것이기에 피해야한다.<br>\n<code class=\"language-text\">report.appendFooter()</code><br>\n출력 인수로 사용하라고 설계한 <code class=\"language-text\">this</code>를 활용하여 이렇게 작성하도록 하자.</li>\n</ul>\n<h3 id=\"명령과-조회를-분리하라\" style=\"position:relative;\"><a href=\"#%EB%AA%85%EB%A0%B9%EA%B3%BC-%EC%A1%B0%ED%9A%8C%EB%A5%BC-%EB%B6%84%EB%A6%AC%ED%95%98%EB%9D%BC\" aria-label=\"명령과 조회를 분리하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명령과 조회를 분리하라!</h3>\n<p>함수는 뭔가를 수행하거나 뭔가에 답하거나 둘 중 <strong>하나</strong>만 해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> value<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 함수를</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"unclebob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>이렇게 사용하면 어색하다.<br>\nset이 00속성이 ㅁㅁ으로 설정되어 있다면…으로 읽힌다.<br>\n명령과 조회를 분리해 혼란을 뿌리뽑자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">attributeExists</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"unclebob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"오류-코드보다-예외를-사용하라\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%EC%BD%94%EB%93%9C%EB%B3%B4%EB%8B%A4-%EC%98%88%EC%99%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\"오류 코드보다 예외를 사용하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 코드보다 예외를 사용하라!</h3>\n<p>오류 코드를 반환하면 호출자는 곧바로 처리해야한다.<br>\nif문을 엄청 쓰게 되는 것이다.<br>\n하지만 예외 처리를 해주면 try-catch로 코드가 깔끔해진다.</p>\n<ul>\n<li>Try/Catch 블록 뽑아내기</li>\n</ul>\n<p>try-catch 블록은 원래 추하다.<br>\n블록을 별도 함수로 뽑아내는 편이 좋다.</p>\n<ul>\n<li>오류 처리도 한 가지 작업이다.</li>\n</ul>\n<p>함수에 키워드 try가 있다면 함수는 try문으로 시작해 catch/finally문으로 끝나야 한다.</p>\n<ul>\n<li>Error.java 의존성 자석</li>\n</ul>\n<p>오류 코드를 반환한다는 것은 오류코드를 어딘가에 정의해둔다는 것이다.<br>\n오류 코드 대신 예외를 사용하면 새 예외는 Exceptoin 클래스에서 파생된다.<br>\n따라서 재컴파일/재배치 없이도 새 예외 클래스를 추가할 수 있다.</p>\n<h3 id=\"반복하지-마라\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EB%B3%B5%ED%95%98%EC%A7%80-%EB%A7%88%EB%9D%BC\" aria-label=\"반복하지 마라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반복하지 마라!</h3>\n<p>중복은 소프트웨어에서 모든 악의 근원이다.<br>\n구조적 프로그래밍, AOP, COP 등 모두 어떤 면에서는 중복 제거 전략이다.<br>\ninclude를 활용하여 제거하는 방법도 있다.</p>\n<h3 id=\"구조적-프로그래밍\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0%EC%A0%81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"구조적 프로그래밍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조적 프로그래밍</h3>\n<p>함수 내의 모든 블록에 입구와 출구는 하나만 존재해야 한다.<br>\n<strong>goto</strong>는 절대로!! 안 된다.\r\n함수가 작을 때 간혹 return, break, continue는 괜찮다.</p>\n<h3 id=\"함수를-어떻게-짜죠\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%A7%9C%EC%A3%A0\" aria-label=\"함수를 어떻게 짜죠 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수를 어떻게 짜죠?</h3>\n<ol>\n<li>초안을 짠다.</li>\n<li>코드를 다듬는다.</li>\n<li>함수를 만든다.</li>\n<li>이름을 바꾼다.</li>\n<li>중복을 제거한다.</li>\n<li>메서드를 줄이고 순서를 바꾼다.</li>\n</ol>\n<blockquote>\n<p>이 와중에도 코드는 항상 단위 테스트를 통과한다.</p>\n</blockquote>\n<h3 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"내가 작성하는 함수가 분명하고 정확한 언어로 깔끔하게 같이 맞아떨어져야 \r\n이야기를 풀어가긱가 쉬워진다는 사실을 기억하자.</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#intro\">Intro</a></p>\n<ul>\n<li><a href=\"#%EC%9E%91%EA%B2%8C-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%9D%BC\">작게 만들어라</a></li>\n<li><a href=\"#%ED%95%9C-%EA%B0%80%EC%A7%80%EB%A7%8C-%ED%95%B4%EB%9D%BC\">한 가지만 해라!</a></li>\n<li><a href=\"#%ED%95%A8%EC%88%98%EB%8B%B9-%EC%B6%94%EC%83%81%ED%99%94-%EC%88%98%EC%A4%80%EC%9D%80-%ED%95%98%EB%82%98%EB%A1%9C\">함수당 추상화 수준은 하나로!</a></li>\n<li><a href=\"#switch%EB%AC%B8\">Switch문</a></li>\n<li><a href=\"#%EC%84%9C%EC%88%A0%EC%A0%81%EC%9D%B8-%EC%9D%B4%EB%A6%84%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\">서술적인 이름을 사용하라!</a></li>\n<li><a href=\"#%ED%95%A8%EC%88%98-%EC%9D%B8%EC%88%98\">함수 인수</a></li>\n<li><a href=\"#%EB%B6%80%EC%88%98-%ED%9A%A8%EA%B3%BC%EB%A5%BC-%EC%9D%BC%EC%9C%BC%ED%82%A4%EC%A7%80-%EB%A7%88%EB%9D%BC\">부수 효과를 일으키지 마라!</a></li>\n<li><a href=\"#%EB%AA%85%EB%A0%B9%EA%B3%BC-%EC%A1%B0%ED%9A%8C%EB%A5%BC-%EB%B6%84%EB%A6%AC%ED%95%98%EB%9D%BC\">명령과 조회를 분리하라!</a></li>\n<li><a href=\"#%EC%98%A4%EB%A5%98-%EC%BD%94%EB%93%9C%EB%B3%B4%EB%8B%A4-%EC%98%88%EC%99%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\">오류 코드보다 예외를 사용하라!</a></li>\n<li><a href=\"#%EB%B0%98%EB%B3%B5%ED%95%98%EC%A7%80-%EB%A7%88%EB%9D%BC\">반복하지 마라!</a></li>\n<li><a href=\"#%EA%B5%AC%EC%A1%B0%EC%A0%81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">구조적 프로그래밍</a></li>\n<li><a href=\"#%ED%95%A8%EC%88%98%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%A7%9C%EC%A3%A0\">함수를 어떻게 짜죠?</a></li>\n<li><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 30, 2024","title":"3장 함수","categories":"Clean_Code","author":"신승민","emoji":"🍫"},"fields":{"slug":"/[Clean Code] 3장 함수/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://maljaaa.github.io","comments":{"utterances":{"repo":"maljaaa/maljaaa.github.io"}}}}},"pageContext":{"slug":"/[Clean Code] 4장 주석/","nextSlug":"/[Clean Code] 3장 함수/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}