{"componentChunkName":"component---src-templates-blog-template-js","path":"/[Clean Code] 13장 동시성/","result":{"data":{"cur":{"id":"68b885f1-b566-5fd3-a381-1f69c230500d","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"객체는 처리의 추상화다. 스레드는 일정의 추상화다.\"\r\n- 제임스 O.코플리엔</code></pre></div>\n<p>동시성과 깔끔한 코드는 양립하기 어렵다.<br>\n스레드를 하나만 실행하는 코드는 짜기가 쉽다.<br>\n간략히 알아보자.</p>\n<h3 id=\"동시성이-필요한-이유\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%8B%9C%EC%84%B1%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\"동시성이 필요한 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동시성이 필요한 이유?</h3>\n<p>동시성은 <strong>결합(coupling)</strong> 을 없애는 전략이다.<br>\n즉, <strong>무엇(what)</strong> 과 <strong>언제(when)</strong> 를 분리하는 전략이다.<br>\n그래서 디버깅을 할 때 **정지점(breakpoint)**을 정한 후 어느 정지점에 걸렸는지 살펴본다.</p>\n<p>서블릿은 EJB컨테이너 안에서 돌아가는데, 이들은 동시성을 <strong>부분적</strong>으로 관리한다.<br>\n각 서블릿 스레드는 다른 서블릿과 무관하게 돌아간다.<br>\n서블릿 모델이 제공하는 구조적 이점이 아주 크다.</p>\n<p>하지만 <strong>작업 처리량(throughput)</strong> 개선이라는 요구로 인해 직접적인 동시성을 구현해야 한다.</p>\n<h4 id=\"미신과-오해\" style=\"position:relative;\"><a href=\"#%EB%AF%B8%EC%8B%A0%EA%B3%BC-%EC%98%A4%ED%95%B4\" aria-label=\"미신과 오해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>미신과 오해</h4>\n<ol>\n<li>동시성은 향상 성능을 높여준다.\n<ul>\n<li>동시성은 <strong>때로</strong> 성능을 높여준다.</li>\n</ul>\n</li>\n<li>동시성을 구현해도 설계는 변하지 않는다.\n<ul>\n<li><strong>무엇</strong> 과 <strong>언제</strong> 를 분리하면 시스템 구조가 크게 달라진다.</li>\n</ul>\n</li>\n<li>웹 또는 EJB 컨테이너를 사용하면 동시성을 이해할 필요가 없다.\n<ul>\n<li>어떻게 동작하는지, 문제가 생기는 지 알아야 한다.</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"동시성과-관련된-타당한-생각\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%8B%9C%EC%84%B1%EA%B3%BC-%EA%B4%80%EB%A0%A8%EB%90%9C-%ED%83%80%EB%8B%B9%ED%95%9C-%EC%83%9D%EA%B0%81\" aria-label=\"동시성과 관련된 타당한 생각 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동시성과 관련된 타당한 생각</h4>\n<ol>\n<li>동시성은 다소 부하를 유발한다.</li>\n<li>동시성은 복잡하다.</li>\n<li>일반적으로 동시성 버그는 재현하기 어렵다.</li>\n<li>동시성을 구현하려면 흔히 근본적인 설계 전략을 재고해야 한다.</li>\n</ol>\n<h3 id=\"난관\" style=\"position:relative;\"><a href=\"#%EB%82%9C%EA%B4%80\" aria-label=\"난관 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>난관</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">X</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> latsIdUsed<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNextId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">++</span>lastIdUsed<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>인스턴스 X를 생성하고, lastIdUsed 필드를 42로 설정한 다음,<br>\n두 스레드가 해당 인스턴스를 공유한다.<br>\n두 스레드가 getNextId()를 호출한다고 가정하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">43, 44 -> 44  \r\n44, 43 -> 44  \r\n43, 43 -> 43  </code></pre></div>\n<p>결과는 셋 중 하나다.</p>\n<h3 id=\"동시성-방어-원칙\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%B0%A9%EC%96%B4-%EC%9B%90%EC%B9%99\" aria-label=\"동시성 방어 원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동시성 방어 원칙</h3>\n<h4 id=\"단일-책임-원칙single-responsibility-principle-srp\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%9D%BC-%EC%B1%85%EC%9E%84-%EC%9B%90%EC%B9%99single-responsibility-principle-srp\" aria-label=\"단일 책임 원칙single responsibility principle srp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단일 책임 원칙(Single Responsibility Principle, SRP)</h4>\n<p>동시성 관련 코드는 다른 코드와 분리해야 한다.</p>\n<h4 id=\"따름-정리corollary-자료-범위를-제한하라\" style=\"position:relative;\"><a href=\"#%EB%94%B0%EB%A6%84-%EC%A0%95%EB%A6%ACcorollary-%EC%9E%90%EB%A3%8C-%EB%B2%94%EC%9C%84%EB%A5%BC-%EC%A0%9C%ED%95%9C%ED%95%98%EB%9D%BC\" aria-label=\"따름 정리corollary 자료 범위를 제한하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>따름 정리(corollary): 자료 범위를 제한하라</h4>\n<p>공유 객체를 사용하는 코드 내 <strong>임게영역</strong> 을 <strong>synchronized</strong> 키워드로 보호하라.<br>\n자료를 <strong>캡슐화</strong>하라.<br>\n공유 자료를 최대한 줄여라.</p>\n<h4 id=\"따름-정리-자료-사본을-사용하라\" style=\"position:relative;\"><a href=\"#%EB%94%B0%EB%A6%84-%EC%A0%95%EB%A6%AC-%EC%9E%90%EB%A3%8C-%EC%82%AC%EB%B3%B8%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\"따름 정리 자료 사본을 사용하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>따름 정리: 자료 사본을 사용하라</h4>\n<p>어떤 경우엔 각 스레드가 객체를 복사해 사용한 후<br>\n한 스레드가 해당 사본에서 결과를 가져와야 한다.<br>\n비용은 사본 생성과 가비지 컬렉션에 드는 부하를 상쇄할 가능성이 크다.</p>\n<h4 id=\"따름정리-스레드는-가능한-독립적으로-구현하라\" style=\"position:relative;\"><a href=\"#%EB%94%B0%EB%A6%84%EC%A0%95%EB%A6%AC-%EC%8A%A4%EB%A0%88%EB%93%9C%EB%8A%94-%EA%B0%80%EB%8A%A5%ED%95%9C-%EB%8F%85%EB%A6%BD%EC%A0%81%EC%9C%BC%EB%A1%9C-%EA%B5%AC%ED%98%84%ED%95%98%EB%9D%BC\" aria-label=\"따름정리 스레드는 가능한 독립적으로 구현하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>따름정리: 스레드는 가능한 독립적으로 구현하라</h4>\n<p>독립적인 스레드로, 가능하면 다른 프로세서에서, 돌려도 괜찮도록<br>\n자료를 독립적인 단위로 분할하라.</p>\n<h3 id=\"라이브러리를-이해하라\" style=\"position:relative;\"><a href=\"#%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A5%BC-%EC%9D%B4%ED%95%B4%ED%95%98%EB%9D%BC\" aria-label=\"라이브러리를 이해하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>라이브러리를 이해하라</h3>\n<p>자바 5에서 스레드 코드를 구현할 때 좋은 방법은 다음과 같다.</p>\n<ul>\n<li>컬렉션 사용</li>\n<li>서로 무관한 작업을 수행할 땐 executor 프레임워크 사용</li>\n<li>스레드가 차단(blocking) 되지 않는 방법 사용</li>\n<li>일부 클래스 라이브러리는 스레드에 안전하지 못함</li>\n</ul>\n<h4 id=\"스레드-환경에-안전한-컬렉션\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C-%ED%99%98%EA%B2%BD%EC%97%90-%EC%95%88%EC%A0%84%ED%95%9C-%EC%BB%AC%EB%A0%89%EC%85%98\" aria-label=\"스레드 환경에 안전한 컬렉션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스레드 환경에 안전한 컬렉션</h4>\n<p><strong>java.util.concurrent</strong> 패키지<br>\nConcurrentHasMap이 HashMap보다 빠르다.<br>\n자바에서는 java.util.concurrent, java.util.concurrent.atomic,<br>\njava.util.concurrent.locks를 익혀라.</p>\n<h3 id=\"실행-모델을-이해하라\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89-%EB%AA%A8%EB%8D%B8%EC%9D%84-%EC%9D%B4%ED%95%B4%ED%95%98%EB%9D%BC\" aria-label=\"실행 모델을 이해하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행 모델을 이해하라</h3>\n<h4 id=\"생산자-소비자\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%82%B0%EC%9E%90-%EC%86%8C%EB%B9%84%EC%9E%90\" aria-label=\"생산자 소비자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생산자-소비자</h4>\n<p>생산자 스레드와 소비자 스레드가 사용하는 대기열은 <strong>한정된 자원</strong> 이다.<br>\n빈 공간이 생길 때까지 기다리고, 정보가 채워질 때까지 기다린다.<br>\n따라서 둘 다 진행 가능함에도 동시에 기다릴 가능성이 있다.</p>\n<h4 id=\"읽기-쓰기\" style=\"position:relative;\"><a href=\"#%EC%9D%BD%EA%B8%B0-%EC%93%B0%EA%B8%B0\" aria-label=\"읽기 쓰기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>읽기-쓰기</h4>\n<p>처리율을 강조하면 기아현상이 생기거나 오래된 정보가 쌓인다.<br>\n따라서 읽기 스레드의 요구와 쓰기 스레드의 요구를 적절히 만족시켜<br>\n처리율도 적당히 높이고 기아도 방지하는 해법이 필요하다.</p>\n<h4 id=\"식사하는-철학자들\" style=\"position:relative;\"><a href=\"#%EC%8B%9D%EC%82%AC%ED%95%98%EB%8A%94-%EC%B2%A0%ED%95%99%EC%9E%90%EB%93%A4\" aria-label=\"식사하는 철학자들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>식사하는 철학자들</h4>\n<p>흔한 예시다.<br>\n데드락, 라이브락, 처리율 저하, 요율성 저하 등을 공부하고 해법을 직접 구현해보자.</p>\n<h3 id=\"동기화하는-메서드-사이에-존재하는-의존성을-이해하라\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EA%B8%B0%ED%99%94%ED%95%98%EB%8A%94-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%82%AC%EC%9D%B4%EC%97%90-%EC%A1%B4%EC%9E%AC%ED%95%98%EB%8A%94-%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9D%84-%EC%9D%B4%ED%95%B4%ED%95%98%EB%9D%BC\" aria-label=\"동기화하는 메서드 사이에 존재하는 의존성을 이해하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동기화하는 메서드 사이에 존재하는 의존성을 이해하라</h3>\n<p>공유 클래스 하나에 동기화된 매서드가 여럿이라면 구현이 올바른지 확인하자.</p>\n<p>공유 객체 하나에는 메서드 하나만 사용하라.</p>\n<p>그게 아니라면 다음을 고려하자.</p>\n<ul>\n<li>클라이언트에서 잠금: 첫 번째 메서드 ~ 마지막 메서드까지 잠금 유지</li>\n<li>서버에서 잠금: 서버를 잠그고 모든 메서드 호출 후 잠금 해제하는 매서드 구현</li>\n<li>연결(Adapted) 서버: 중간 단계 생성, 원래 서버 변경 x</li>\n</ul>\n<h3 id=\"동기화하는-부분을-작게-만들어라\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EA%B8%B0%ED%99%94%ED%95%98%EB%8A%94-%EB%B6%80%EB%B6%84%EC%9D%84-%EC%9E%91%EA%B2%8C-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%9D%BC\" aria-label=\"동기화하는 부분을 작게 만들어라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동기화하는 부분을 작게 만들어라</h3>\n<p>synchronized 키워드를 사용하면 락을 설정한다.<br>\n그러므로 남발하는 코드를 작성하지 말자.<br>\n반면, 임계영역은 반드시 보호해야 한다.<br>\n따라서 임계영역 수를 최대한 줄여야 한다.</p>\n<p>동기화 하는 부분을 최대한 작게 만들어라.</p>\n<h3 id=\"올바른-종료-코드는-구현하기-어렵다\" style=\"position:relative;\"><a href=\"#%EC%98%AC%EB%B0%94%EB%A5%B8-%EC%A2%85%EB%A3%8C-%EC%BD%94%EB%93%9C%EB%8A%94-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-%EC%96%B4%EB%A0%B5%EB%8B%A4\" aria-label=\"올바른 종료 코드는 구현하기 어렵다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>올바른 종료 코드는 구현하기 어렵다</h3>\n<p>데드락은 가장 흔히 발생한다.<br>\n오지 않을 시그널을 기다리는 것이다.<br>\n종료 코드를 개발 초기부터 고민하고 동작하게 초기부터 구현하라.<br>\n생각보다 오래 걸린다.<br>\n생각보다 어려우므로 이미 나온 알고리즘을 검토하라.</p>\n<h3 id=\"스레드-코드-테스트하기\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%BD%94%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0\" aria-label=\"스레드 코드 테스트하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스레드 코드 테스트하기</h3>\n<p>문제를 노출하는 테스트 케이스를 작성하라.<br>\n프로그램 설정과 시스템 설정과 부하를 바꿔가며 자주 돌려라.<br>\n테스트가 실패하면 원인을 추적하라.<br>\n다시 돌렸더니 통과하더라는 이유로 그냥 넘어가면 절대로 안 된다.</p>\n<ul>\n<li>말이 안 되는 실패는 잠정적인 스레드 문제로 취급</li>\n</ul>\n<blockquote>\n<p>시스템 실패를 ‘일회성’이라 치부하지 마라</p>\n</blockquote>\n<ul>\n<li>다중 스레드를 고려하지 않은 순차 코드부터 제대로 돌게 만들자.</li>\n</ul>\n<blockquote>\n<p>먼저 스레드 환경 밖에서 코드를 올바로 돌려라.</p>\n</blockquote>\n<ul>\n<li>다중 스레드를 쓰는 코드 부분을 다양한 환경에 사용할 수 있도록 스레드 코드 구현</li>\n<li>다중 스레드를 쓰는 코드 부분을 상황에 맞춰 조정할 수 있게 작성</li>\n<li>프로세서 수보다 많은 스레드를 돌려봐.</li>\n</ul>\n<blockquote>\n<p>스와핑할 때도 문제가 발생할 수 있음<br>\n데드락 코드 찾기 쉬워짐</p>\n</blockquote>\n<ul>\n<li>다른 플랫폼에서 돌려보라</li>\n<li>코드에 보조 코드를 넣어 돌려라. 강제로 실패를 일으키게 해보라.</li>\n</ul>\n<blockquote>\n<p>직접 구현: wait()/sleep()/yield()/priority()<br>\n자동화: AOF(Aspect-Oriented Framework), CGLIB, ASM</p>\n</blockquote>\n<h3 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h3>\n<ol>\n<li>SRP 준수</li>\n<li>동시성 오류 원인 이해</li>\n<li>라이브러리와 기본 알고리즘 이해</li>\n<li>보호할 코드 영역을 찾아내는 방법과 특정 코드 영역을 잠그는 방법 이해</li>\n<li>문제를 일회성으로 치부하지 말 것</li>\n<li>보조코드 활용</li>\n</ol>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#intro\">Intro</a></p>\n<ul>\n<li>\n<p><a href=\"#%EB%8F%99%EC%8B%9C%EC%84%B1%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9D%B4%EC%9C%A0\">동시성이 필요한 이유?</a></p>\n<ul>\n<li><a href=\"#%EB%AF%B8%EC%8B%A0%EA%B3%BC-%EC%98%A4%ED%95%B4\">미신과 오해</a></li>\n<li><a href=\"#%EB%8F%99%EC%8B%9C%EC%84%B1%EA%B3%BC-%EA%B4%80%EB%A0%A8%EB%90%9C-%ED%83%80%EB%8B%B9%ED%95%9C-%EC%83%9D%EA%B0%81\">동시성과 관련된 타당한 생각</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%82%9C%EA%B4%80\">난관</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%B0%A9%EC%96%B4-%EC%9B%90%EC%B9%99\">동시성 방어 원칙</a></p>\n<ul>\n<li><a href=\"#%EB%8B%A8%EC%9D%BC-%EC%B1%85%EC%9E%84-%EC%9B%90%EC%B9%99single-responsibility-principle-srp\">단일 책임 원칙(Single Responsibility Principle, SRP)</a></li>\n<li><a href=\"#%EB%94%B0%EB%A6%84-%EC%A0%95%EB%A6%ACcorollary-%EC%9E%90%EB%A3%8C-%EB%B2%94%EC%9C%84%EB%A5%BC-%EC%A0%9C%ED%95%9C%ED%95%98%EB%9D%BC\">따름 정리(corollary): 자료 범위를 제한하라</a></li>\n<li><a href=\"#%EB%94%B0%EB%A6%84-%EC%A0%95%EB%A6%AC-%EC%9E%90%EB%A3%8C-%EC%82%AC%EB%B3%B8%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\">따름 정리: 자료 사본을 사용하라</a></li>\n<li><a href=\"#%EB%94%B0%EB%A6%84%EC%A0%95%EB%A6%AC-%EC%8A%A4%EB%A0%88%EB%93%9C%EB%8A%94-%EA%B0%80%EB%8A%A5%ED%95%9C-%EB%8F%85%EB%A6%BD%EC%A0%81%EC%9C%BC%EB%A1%9C-%EA%B5%AC%ED%98%84%ED%95%98%EB%9D%BC\">따름정리: 스레드는 가능한 독립적으로 구현하라</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A5%BC-%EC%9D%B4%ED%95%B4%ED%95%98%EB%9D%BC\">라이브러리를 이해하라</a></p>\n<ul>\n<li><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C-%ED%99%98%EA%B2%BD%EC%97%90-%EC%95%88%EC%A0%84%ED%95%9C-%EC%BB%AC%EB%A0%89%EC%85%98\">스레드 환경에 안전한 컬렉션</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%8B%A4%ED%96%89-%EB%AA%A8%EB%8D%B8%EC%9D%84-%EC%9D%B4%ED%95%B4%ED%95%98%EB%9D%BC\">실행 모델을 이해하라</a></p>\n<ul>\n<li><a href=\"#%EC%83%9D%EC%82%B0%EC%9E%90-%EC%86%8C%EB%B9%84%EC%9E%90\">생산자-소비자</a></li>\n<li><a href=\"#%EC%9D%BD%EA%B8%B0-%EC%93%B0%EA%B8%B0\">읽기-쓰기</a></li>\n<li><a href=\"#%EC%8B%9D%EC%82%AC%ED%95%98%EB%8A%94-%EC%B2%A0%ED%95%99%EC%9E%90%EB%93%A4\">식사하는 철학자들</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%8F%99%EA%B8%B0%ED%99%94%ED%95%98%EB%8A%94-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%82%AC%EC%9D%B4%EC%97%90-%EC%A1%B4%EC%9E%AC%ED%95%98%EB%8A%94-%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9D%84-%EC%9D%B4%ED%95%B4%ED%95%98%EB%9D%BC\">동기화하는 메서드 사이에 존재하는 의존성을 이해하라</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8F%99%EA%B8%B0%ED%99%94%ED%95%98%EB%8A%94-%EB%B6%80%EB%B6%84%EC%9D%84-%EC%9E%91%EA%B2%8C-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%9D%BC\">동기화하는 부분을 작게 만들어라</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%98%AC%EB%B0%94%EB%A5%B8-%EC%A2%85%EB%A3%8C-%EC%BD%94%EB%93%9C%EB%8A%94-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-%EC%96%B4%EB%A0%B5%EB%8B%A4\">올바른 종료 코드는 구현하기 어렵다</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%BD%94%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0\">스레드 코드 테스트하기</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"Intro 동시성과 깔끔한 코드는 양립하기 어렵다. 스레드를 하나만 실행하는 코드는 짜기가 쉽다. 간략히 알아보자. 동시성이 필요한 이유? 동시성은 결합(coupling) 을 없애는 전략이다. 즉, 무엇(what) 과 언제(when) 를 분리하는 전략이다. 그래서 디버깅을 할 때 **정지점(breakpoint)**을 정한 후 어느 정지점에 걸렸는지 살펴본다. 서블릿은 EJB컨테이너 안에서 돌아가는데, 이들은 동시성을 부분적으로 관리한다. 각 서블릿 스레드는 다른 서블릿과 무관하게 돌아간다. 서블릿 모델이 제공하는 구조적 이점이 아주 크다. 하지만 작업 처리량(throughput) 개선이라는 요구로 인해 직접적인 동시성을 구현해야 한다. 미신과 오해 동시성은 향상 성능을 높여준다. 동시성은 때로 성능을 높여준다. 동시성을 구현해도 설계는 변하지 않는다. 무엇 과 언제 를 분리하면 시스템 구조가 크게 달라진다. 웹 또는 EJB 컨테이너를 사용하면 동시성을 이해할 필요가 없다. 어떻게 …","frontmatter":{"date":"September 19, 2024","title":"13장 동시성","categories":"Clean_Code","author":"신승민","emoji":"😐"},"fields":{"slug":"/[Clean Code] 13장 동시성/"}},"next":{"id":"973448b9-e7d6-596c-9dec-0b554e194602","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>창발적? 이라는 단어를 처음 들었다.<br>\n구글에 검색해보니, 뜻은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">창발 또는 떠오름 현상은 하위 계층에는 없는 특성이나 행동이\r\n상위 계층(전체 구조)에서 자발적으로 돌연히 출현하는 현상이다.\r\n또한 불시에 솟아나는 특성을 창발성(Emergent Property) 또는\r\n이머전스(Emergence) 라고도 부른다.</code></pre></div>\n<h3 id=\"창발적-설계로-깔끔한-코드를-구현하자\" style=\"position:relative;\"><a href=\"#%EC%B0%BD%EB%B0%9C%EC%A0%81-%EC%84%A4%EA%B3%84%EB%A1%9C-%EA%B9%94%EB%81%94%ED%95%9C-%EC%BD%94%EB%93%9C%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%98%EC%9E%90\" aria-label=\"창발적 설계로 깔끔한 코드를 구현하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>창발적 설계로 깔끔한 코드를 구현하자</h3>\n<p>켄트 벡이 제시한 <code class=\"language-text\">단순한 설계 규칙 네 가지</code>를 적용하면<br>\nSRP나 DIP와 같은 원칙을 적용하기 쉬워진다.<br>\n켄트 벡은 다음 규칙을 따르면 설계는 ‘단순하다’고 말한다.</p>\n<ul>\n<li>모든 테스트를 실행한다.</li>\n<li>중복을 없앤다.</li>\n<li>프로그래머 의도를 표현한다.</li>\n<li>클래스와 메서드 수를 최소로 줄인다.</li>\n</ul>\n<h3 id=\"단순한-설계-규칙-1-모든-테스트를-실행하라\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%88%9C%ED%95%9C-%EC%84%A4%EA%B3%84-%EA%B7%9C%EC%B9%99-1-%EB%AA%A8%EB%93%A0-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%8B%A4%ED%96%89%ED%95%98%EB%9D%BC\" aria-label=\"단순한 설계 규칙 1 모든 테스트를 실행하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단순한 설계 규칙 1: 모든 테스트를 실행하라</h3>\n<p>어떠한 프로그램을 만들었을 때, 검증되지 않으면 무용지물이다.<br>\n검증되지 않은 프로그램은 절대 출시해서는 안 된다.<br>\n그렇기에 모든 테스트를 만들어야 하는데, SRP를 준수하면 단순해진다.</p>\n<p>결합도가 높으면 테스트 케이스를 작성하기 어렵다.<br>\nDIP를 적용하고 DI, 인터페이스, 추상화 등과 같은 도구로 결합도를 낮춘다.</p>\n<p>즉, 테스트 케이스를 작성하면 설계 품질이 높아진다.</p>\n<h3 id=\"단순한-설계-규칙-2--4-리팩터링\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%88%9C%ED%95%9C-%EC%84%A4%EA%B3%84-%EA%B7%9C%EC%B9%99-2--4-%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%81\" aria-label=\"단순한 설계 규칙 2  4 리팩터링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단순한 설계 규칙 2 ~ 4: 리팩터링</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">코드를 정리하면서 시스템이 깨질까 걱정할 필요가 없다.  \r\n테스트 케이스가 있으니까!</code></pre></div>\n<p>리팩터링 단계에서는 소프트웨어 설계 품질을 높이는 방법이라면 뭐든 괜찮다.<br>\n응집도 높이고, 결합도 낮추고, 관심사 분리하고, 모듈로 나누고,<br>\n함수와 클래스 크기를 줄이고, 더 나은 네이밍을 하는 등 다양한 기법을 동원하자.</p>\n<h3 id=\"중복을-없애라\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EB%B3%B5%EC%9D%84-%EC%97%86%EC%95%A0%EB%9D%BC\" aria-label=\"중복을 없애라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중복을 없애라</h3>\n<p>중복은  추가 작업, 추가 위험, 불필요한 복잡도를 뜻한다.</p>\n<p><code class=\"language-text\">TEMPLATE METHOD 패턴</code>은 고차원 중복을 제거할 목적으로 자주 사용하는 기법이다.<br>\n쉽게 얘기하면 <strong>공통된 부분</strong>을 따로 빼는 것이다.</p>\n<h3 id=\"표현하라\" style=\"position:relative;\"><a href=\"#%ED%91%9C%ED%98%84%ED%95%98%EB%9D%BC\" aria-label=\"표현하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>표현하라</h3>\n<p>유지보수의 비용은 생각보다 크다.<br>\n그렇기에 개발자의 의도를 잘 표현해야 다른 개발자가 이해하기 쉽고,<br>\n유지보수 비용이 적게 든다.</p>\n<ol>\n<li>좋은 이름을 선택하자.</li>\n<li>함수와 클래스 크기를 가능한 줄이자.</li>\n<li>표준 명칭을 사용하자.(표준 패턴을 사용한다면 클래스 이름에 패턴 이름을 넣어주자)</li>\n<li>단위 테스트 케이스를 꼼꼼히 작성하자.</li>\n</ol>\n<h3 id=\"클래스와-메서드-수를-최소로-줄여라\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%88%98%EB%A5%BC-%EC%B5%9C%EC%86%8C%EB%A1%9C-%EC%A4%84%EC%97%AC%EB%9D%BC\" aria-label=\"클래스와 메서드 수를 최소로 줄여라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스와 메서드 수를 최소로 줄여라</h3>\n<p>클래스와 함수 수를 줄이는 작업도 중요하지만,<br>\n테스트 케이스를 만들고 중복을 제고하고 의도를 표현하는 작업이<br>\n더 중요하다.</p>\n<h3 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h3>\n<p>경험을 대신할 단순한 개발 기법이 있을까?<br>\n당연히 <code class=\"language-text\">없다</code><br>\n또 이번 장에는 이런걸 느꼈다.<br>\n리팩터링보다 더 중요한 것은 테스트 케이스라는 것을.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#intro\">Intro</a></p>\n<ul>\n<li><a href=\"#%EC%B0%BD%EB%B0%9C%EC%A0%81-%EC%84%A4%EA%B3%84%EB%A1%9C-%EA%B9%94%EB%81%94%ED%95%9C-%EC%BD%94%EB%93%9C%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%98%EC%9E%90\">창발적 설계로 깔끔한 코드를 구현하자</a></li>\n<li><a href=\"#%EB%8B%A8%EC%88%9C%ED%95%9C-%EC%84%A4%EA%B3%84-%EA%B7%9C%EC%B9%99-1-%EB%AA%A8%EB%93%A0-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%8B%A4%ED%96%89%ED%95%98%EB%9D%BC\">단순한 설계 규칙 1: 모든 테스트를 실행하라</a></li>\n<li><a href=\"#%EB%8B%A8%EC%88%9C%ED%95%9C-%EC%84%A4%EA%B3%84-%EA%B7%9C%EC%B9%99-2--4-%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%81\">단순한 설계 규칙 2 ~ 4: 리팩터링</a></li>\n<li><a href=\"#%EC%A4%91%EB%B3%B5%EC%9D%84-%EC%97%86%EC%95%A0%EB%9D%BC\">중복을 없애라</a></li>\n<li><a href=\"#%ED%91%9C%ED%98%84%ED%95%98%EB%9D%BC\">표현하라</a></li>\n<li><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%88%98%EB%A5%BC-%EC%B5%9C%EC%86%8C%EB%A1%9C-%EC%A4%84%EC%97%AC%EB%9D%BC\">클래스와 메서드 수를 최소로 줄여라</a></li>\n<li><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 12, 2024","title":"12장 창발성","categories":"Clean_Code","author":"신승민","emoji":"😐"},"fields":{"slug":"/[Clean Code] 12장 창발성/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://maljaaa.github.io","comments":{"utterances":{"repo":"maljaaa/maljaaa.github.io"}}}}},"pageContext":{"slug":"/[Clean Code] 13장 동시성/","nextSlug":"/[Clean Code] 12장 창발성/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}