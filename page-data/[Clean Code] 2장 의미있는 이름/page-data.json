{"componentChunkName":"component---src-templates-blog-template-js","path":"/[Clean Code] 2장 의미있는 이름/","result":{"data":{"cur":{"id":"ad644289-7809-51c4-a31d-49de2becd758","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>나는 평소에 네이밍을 하는데 어려움이 있었다. 여러 컨벤션들이 있었지만, 내가 옆에 두고 하지 않는 이상 좋은 네이밍을 하기엔 어려웠다. 아직은 경험이 없고 익숙하지 않아서 일까?… 그래서 더더욱 이번 챕터를 재미있게 봤다.</p>\n<h3 id=\"의도를-분명히-밝혀라\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EB%8F%84%EB%A5%BC-%EB%B6%84%EB%AA%85%ED%9E%88-%EB%B0%9D%ED%98%80%EB%9D%BC\" aria-label=\"의도를 분명히 밝혀라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의도를 분명히 밝혀라</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"의도가 분명하게 이름을 지으라\"</code></pre></div>\n<p>따로 주석이 필요하다면 의도를 분명히 드러내지 못했다는 말이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> d<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 경과 시간(단위: 날짜)</span></code></pre></div>\n<p>여기서 d는 아무 의미도 드러나지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> elapsedTimeInDays<span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">int</span> daysSinceCreation<span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">int</span> daysSinceModification<span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">int</span> fileAgeInDays<span class=\"token punctuation\">;</span></code></pre></div>\n<p>의도가 드러나는 이름을 사용하면 코드 이해와 변경이 쉬워진다. 그러면서도 영어 동사의 표현을 잘 알아야겠다는 생각이 든다.<br>\n다음 코드가 무엇을 하는지 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getThem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> list1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> x <span class=\"token operator\">:</span> theList<span class=\"token punctuation\">)</span> \r\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\r\n            list1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">return</span> list1<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>복잡한 문장은 없다. 공백과 들여쓰기도 적당하다. 변수는 세개, 상수는 두 개뿐이다.<br>\n문제는 코드의 <strong>단순성</strong>이 아니라 코드의 <strong>함축성</strong>이다.<br>\n즉, 코드 맥락이 코드 자체에 명시적으로 드러나지 않는다.</p>\n<ul>\n<li>theList에 무엇이 들었는가?</li>\n<li>theList에서 0번째 값이 어째서 중요한가?</li>\n<li>값 4는 무슨 의미인가?</li>\n<li>함수가 반환하는 리스트 list1을 어떻게 사용하는가?</li>\n</ul>\n<p>그렇다면 지뢰찾기 게임이라고 가정해보고 바꿔보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token function\">getFlaggedCells</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> flaggedCells <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cell <span class=\"token operator\">:</span> gameBoard<span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cell<span class=\"token punctuation\">[</span><span class=\"token constant\">STATUS_VALUE</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token constant\">FLAGGED</span><span class=\"token punctuation\">)</span>\r\n            flaggedCells<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">return</span> flaggedCells<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 작성하니 이해하기 더 수월하다.<br>\n더 나아가, int 배열 대신 클래스를 사용하고, 상수 대신 isFlagged()라는 함수를 사용해 개선해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token function\">getFlaggedCells</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Cell</span><span class=\"token punctuation\">></span></span> flaggedCells <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cell</span> cell <span class=\"token operator\">:</span> gameBoard<span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cell<span class=\"token punctuation\">.</span><span class=\"token function\">isFlagged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n            flaggedCells<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">return</span> flaggedCells<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"그릇된-정보를-피하라\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A6%87%EB%90%9C-%EC%A0%95%EB%B3%B4%EB%A5%BC-%ED%94%BC%ED%95%98%EB%9D%BC\" aria-label=\"그릇된 정보를 피하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그릇된 정보를 피하라</h3>\n<ul>\n<li>다른 플랫폼에서 사용하는 코드를 변수이름으로 하지 말아라.</li>\n<li>리스트를 000List라 명명하지 말고 000s로 명명해라.</li>\n<li>서로 흡사한 이름을 사용하지 않도록 주의하라.</li>\n<li>l은 1과 혼동되고, O는 0과 혼동되므로 주의하라.</li>\n</ul>\n<h3 id=\"의미-있게-구분하라\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EB%AF%B8-%EC%9E%88%EA%B2%8C-%EA%B5%AC%EB%B6%84%ED%95%98%EB%9D%BC\" aria-label=\"의미 있게 구분하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의미 있게 구분하라</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">명확한 관례가 없다면 변수 moneyAmount는 money와 구분이 안 된다.  \r\ncustomerInfo는 customer와, accountData는 account와, theMessage는 message와 구분이 안 된다.  \r\n읽는 사람이 차이를 알도록 이름을 지어라.</code></pre></div>\n<h3 id=\"발음하기-쉬운-이름을-사용하라\" style=\"position:relative;\"><a href=\"#%EB%B0%9C%EC%9D%8C%ED%95%98%EA%B8%B0-%EC%89%AC%EC%9A%B4-%EC%9D%B4%EB%A6%84%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\"발음하기 쉬운 이름을 사용하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>발음하기 쉬운 이름을 사용하라</h3>\n<p>다른 개발자와 소통할 때 변수를 이야기하는 상황이 오게 되는데,<br>\n이때 지적인 대화가 가능해진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">마이키, 이 레코드 좀 보세요. 'Generation Timestamp' 값이 내일 날짜입니다!</code></pre></div>\n<blockquote>\n<p>나는 이 부분을 많이 반성한다…</p>\n</blockquote>\n<h3 id=\"검색하기-쉬운-이름을-사용하라\" style=\"position:relative;\"><a href=\"#%EA%B2%80%EC%83%89%ED%95%98%EA%B8%B0-%EC%89%AC%EC%9A%B4-%EC%9D%B4%EB%A6%84%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\"검색하기 쉬운 이름을 사용하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>검색하기 쉬운 이름을 사용하라</h3>\n<p>문자 하나를 사용하는 이름과 상수는 쉽게 눈에 띄지 않는다.<br>\n그래서 저자와 마찬가지로 나는 간단한 메서드에서 로컬 변수만 한 문자를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"이름 길이는 범위 크기에 비례해야 한다.\"</code></pre></div>\n<p>변수나 상수를 코드 여러 곳에서 사용한다면 검색하기 쉬운 이름이어야 한다.</p>\n<h3 id=\"인코딩을-피하라\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%BD%94%EB%94%A9%EC%9D%84-%ED%94%BC%ED%95%98%EB%9D%BC\" aria-label=\"인코딩을 피하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인코딩을 피하라</h3>\n<p>유형이나 범위 정보까지 인코딩에 넣으면 이름을 해독하기 어려워진다.</p>\n<ul>\n<li>헝가리식 표기법 : 변수 및 함수의 인자 이름 앞에 데이터 타입을 명시하는 코딩 규칙</li>\n<li>멤버 변수 접두어 : 예를 들어 멤버 변수에 m_이라는 접두어</li>\n<li>인터페이스 클래스와 구현 클래스 : <strong>구현 클래스</strong>에 인코딩( ex) ShapeFactoryImp )</li>\n</ul>\n<h3 id=\"자신의-기억력을-자랑하지-마라\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EC%8B%A0%EC%9D%98-%EA%B8%B0%EC%96%B5%EB%A0%A5%EC%9D%84-%EC%9E%90%EB%9E%91%ED%95%98%EC%A7%80-%EB%A7%88%EB%9D%BC\" aria-label=\"자신의 기억력을 자랑하지 마라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자신의 기억력을 자랑하지 마라</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">똑똑한 프로그래머와 전문가 프로그래머 사이에서 나타나는 차이점 하나만 들자면, 전문가 프로그래머는 명료함이 최고라는 사실을 이해한다.</code></pre></div>\n<h3 id=\"클래스-이름\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%9D%B4%EB%A6%84\" aria-label=\"클래스 이름 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 이름</h3>\n<p>명사나 명사구가 적합하다.<br>\nManager, Processor, Data, Info 등과 같은 단어는 피하고, 동사는 사용하지 않는다.</p>\n<h3 id=\"매서드-이름\" style=\"position:relative;\"><a href=\"#%EB%A7%A4%EC%84%9C%EB%93%9C-%EC%9D%B4%EB%A6%84\" aria-label=\"매서드 이름 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>매서드 이름</h3>\n<p>동사나 동사구가 적합하다.<br>\n접근자 - get, 변경자 - set, 조건자 - is<br>\n생성자를 중복정의할 때는 정적 팩토리 매서드를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Complex</span> fulcrumPoint <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Complex</span>\r\n보다\r\n<span class=\"token class-name\">Complex</span> fulcrumPoint <span class=\"token operator\">=</span> <span class=\"token class-name\">Complex<span class=\"token punctuation\">.</span>FromRealNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n가 좋다<span class=\"token punctuation\">.</span></code></pre></div>\n<p>생성자 사용을 제한하려면 해당 생성자를 private로 선언한다.</p>\n<h3 id=\"기발한-이름은-피하라\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B0%9C%ED%95%9C-%EC%9D%B4%EB%A6%84%EC%9D%80-%ED%94%BC%ED%95%98%EB%9D%BC\" aria-label=\"기발한 이름은 피하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기발한 이름은 피하라</h3>\n<p>재미난 이름보다 명료한 이름을 선택하라.<br>\n농담은 피하고, 의도를 분명하고 솔직하게 표현하자.</p>\n<h3 id=\"한-개념에-한-단어를-사용하라\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EA%B0%9C%EB%85%90%EC%97%90-%ED%95%9C-%EB%8B%A8%EC%96%B4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\"한 개념에 한 단어를 사용하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 개념에 한 단어를 사용하라</h3>\n<p>똑같은 매서드를 클래스마다 fetch, retrieve, get으로 제각각 부르면 혼란스럽다.<br>\n근본적으로 다르다고 생각되지 않는 것들을 통일하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"일관성 있는 어휘는 코드를 사용할 프로그래머가 반갑게 여길 선물이다.\"</code></pre></div>\n<h3 id=\"말장난을-하지-마라\" style=\"position:relative;\"><a href=\"#%EB%A7%90%EC%9E%A5%EB%82%9C%EC%9D%84-%ED%95%98%EC%A7%80-%EB%A7%88%EB%9D%BC\" aria-label=\"말장난을 하지 마라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>말장난을 하지 마라</h3>\n<p>기존 값 두 개를 더하는 개념으로 add를 사용하고 있었다가, 하나를 추가하는 개념으로 add를 사용한다면 이는 말장난이다.<br>\ninset나 append라는 이름이 적당하다.</p>\n<h3 id=\"해법-영역에서-가져온-이름을-사용하라\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EB%B2%95-%EC%98%81%EC%97%AD%EC%97%90%EC%84%9C-%EA%B0%80%EC%A0%B8%EC%98%A8-%EC%9D%B4%EB%A6%84%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\"해법 영역에서 가져온 이름을 사용하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해법 영역에서 가져온 이름을 사용하라</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">프로그래머에게 익숙한 기술 개념은 아주 많다.  \r\n기술 개념에는 기술 이름이 가장 적합한 선택이다.  </code></pre></div>\n<h3 id=\"문제-영역에서-가져온-이름을-사용하라\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%98%81%EC%97%AD%EC%97%90%EC%84%9C-%EA%B0%80%EC%A0%B8%EC%98%A8-%EC%9D%B4%EB%A6%84%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\"문제 영역에서 가져온 이름을 사용하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 영역에서 가져온 이름을 사용하라</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">적절한 '프로그래머 용어'가 없다면 문제 영역에서 이름을 가져온다.</code></pre></div>\n<h3 id=\"의미-있는-맥락을-추가하라\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EB%AF%B8-%EC%9E%88%EB%8A%94-%EB%A7%A5%EB%9D%BD%EC%9D%84-%EC%B6%94%EA%B0%80%ED%95%98%EB%9D%BC\" aria-label=\"의미 있는 맥락을 추가하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의미 있는 맥락을 추가하라</h3>\n<p>‘state’ 하나만 보면 이게 뭔지 감이 오는가?<br>\n주소 일부라는 사실을 알기 위해선 ‘addrState’라는 변수를 사용하는게 적당하다.<br>\n이런 의미에서 접두어와 같은 의미있는 맥락을 추가하는 것이 좋다.</p>\n<h3 id=\"불필요한-맥락을-없애라\" style=\"position:relative;\"><a href=\"#%EB%B6%88%ED%95%84%EC%9A%94%ED%95%9C-%EB%A7%A5%EB%9D%BD%EC%9D%84-%EC%97%86%EC%95%A0%EB%9D%BC\" aria-label=\"불필요한 맥락을 없애라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>불필요한 맥락을 없애라</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">accountAddress와 customerAddress는 Address 클래스 인스턴스로는 좋은 이름이나 \r\n클래스 이름으로는 적합하지 못하다.</code></pre></div>\n<h3 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h3>\n<p>학습한 규칙 몇 개를 적용해 코드 가독성이 높아지는지 살펴야겠다.<br>\n다른 사람이 짠 코드를 손본다면 리팩터링 도구를 사용해 문제 해결 목적으로 이름을 개선하라.</p>\n<p><del>우리 회사는 인텔리제이 못 쓰게 하는데…</del></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#intro\">Intro</a></p>\n<ul>\n<li><a href=\"#%EC%9D%98%EB%8F%84%EB%A5%BC-%EB%B6%84%EB%AA%85%ED%9E%88-%EB%B0%9D%ED%98%80%EB%9D%BC\">의도를 분명히 밝혀라</a></li>\n<li><a href=\"#%EA%B7%B8%EB%A6%87%EB%90%9C-%EC%A0%95%EB%B3%B4%EB%A5%BC-%ED%94%BC%ED%95%98%EB%9D%BC\">그릇된 정보를 피하라</a></li>\n<li><a href=\"#%EC%9D%98%EB%AF%B8-%EC%9E%88%EA%B2%8C-%EA%B5%AC%EB%B6%84%ED%95%98%EB%9D%BC\">의미 있게 구분하라</a></li>\n<li><a href=\"#%EB%B0%9C%EC%9D%8C%ED%95%98%EA%B8%B0-%EC%89%AC%EC%9A%B4-%EC%9D%B4%EB%A6%84%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\">발음하기 쉬운 이름을 사용하라</a></li>\n<li><a href=\"#%EA%B2%80%EC%83%89%ED%95%98%EA%B8%B0-%EC%89%AC%EC%9A%B4-%EC%9D%B4%EB%A6%84%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\">검색하기 쉬운 이름을 사용하라</a></li>\n<li><a href=\"#%EC%9D%B8%EC%BD%94%EB%94%A9%EC%9D%84-%ED%94%BC%ED%95%98%EB%9D%BC\">인코딩을 피하라</a></li>\n<li><a href=\"#%EC%9E%90%EC%8B%A0%EC%9D%98-%EA%B8%B0%EC%96%B5%EB%A0%A5%EC%9D%84-%EC%9E%90%EB%9E%91%ED%95%98%EC%A7%80-%EB%A7%88%EB%9D%BC\">자신의 기억력을 자랑하지 마라</a></li>\n<li><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%9D%B4%EB%A6%84\">클래스 이름</a></li>\n<li><a href=\"#%EB%A7%A4%EC%84%9C%EB%93%9C-%EC%9D%B4%EB%A6%84\">매서드 이름</a></li>\n<li><a href=\"#%EA%B8%B0%EB%B0%9C%ED%95%9C-%EC%9D%B4%EB%A6%84%EC%9D%80-%ED%94%BC%ED%95%98%EB%9D%BC\">기발한 이름은 피하라</a></li>\n<li><a href=\"#%ED%95%9C-%EA%B0%9C%EB%85%90%EC%97%90-%ED%95%9C-%EB%8B%A8%EC%96%B4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\">한 개념에 한 단어를 사용하라</a></li>\n<li><a href=\"#%EB%A7%90%EC%9E%A5%EB%82%9C%EC%9D%84-%ED%95%98%EC%A7%80-%EB%A7%88%EB%9D%BC\">말장난을 하지 마라</a></li>\n<li><a href=\"#%ED%95%B4%EB%B2%95-%EC%98%81%EC%97%AD%EC%97%90%EC%84%9C-%EA%B0%80%EC%A0%B8%EC%98%A8-%EC%9D%B4%EB%A6%84%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\">해법 영역에서 가져온 이름을 사용하라</a></li>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%98%81%EC%97%AD%EC%97%90%EC%84%9C-%EA%B0%80%EC%A0%B8%EC%98%A8-%EC%9D%B4%EB%A6%84%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\">문제 영역에서 가져온 이름을 사용하라</a></li>\n<li><a href=\"#%EC%9D%98%EB%AF%B8-%EC%9E%88%EB%8A%94-%EB%A7%A5%EB%9D%BD%EC%9D%84-%EC%B6%94%EA%B0%80%ED%95%98%EB%9D%BC\">의미 있는 맥락을 추가하라</a></li>\n<li><a href=\"#%EB%B6%88%ED%95%84%EC%9A%94%ED%95%9C-%EB%A7%A5%EB%9D%BD%EC%9D%84-%EC%97%86%EC%95%A0%EB%9D%BC\">불필요한 맥락을 없애라</a></li>\n<li><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\">마치면서</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"Intro 나는 평소에 네이밍을 하는데 어려움이 있었다. 여러 컨벤션들이 있었지만, 내가 옆에 두고 하지 않는 이상 좋은 네이밍을 하기엔 어려웠다. 아직은 경험이 없고 익숙하지 않아서 일까?… 그래서 더더욱 이번 챕터를 재미있게 봤다. 의도를 분명히 밝혀라 따로 주석이 필요하다면 의도를 분명히 드러내지 못했다는 말이다. 여기서 d는 아무 의미도 드러나지 않는다. 의도가 드러나는 이름을 사용하면 코드 이해와 변경이 쉬워진다. 그러면서도 영어 동사의 표현을 잘 알아야겠다는 생각이 든다. 다음 코드가 무엇을 하는지 살펴보자. 복잡한 문장은 없다. 공백과 들여쓰기도 적당하다. 변수는 세개, 상수는 두 개뿐이다. 문제는 코드의 단순성이 아니라 코드의 함축성이다. 즉, 코드 맥락이 코드 자체에 명시적으로 드러나지 않는다. theList에 무엇이 들었는가? theList에서 0번째 값이 어째서 중요한가? 값 4는 무슨 의미인가? 함수가 반환하는 리스트 list1을 어떻게 사용하는가? 그렇다면 …","frontmatter":{"date":"August 28, 2024","title":"2장 의미있는 이름","categories":"Clean_Code","author":"신승민","emoji":"🥭"},"fields":{"slug":"/[Clean Code] 2장 의미있는 이름/"}},"next":{"id":"e7746db5-6421-5dfc-8523-7dfbeddaf021","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>회사에서 유지보수를 하다가 끔찍한 프로젝트를 보게 되었다. 변수명과 클래스 명은 모두 1,2,3 혹은 A, B, C로 구분되어 있었다. 이런 이유 때문에 유지보수 하는 일이 너무 힘들었다. 그래서 어떻게 하면 나는 이런 코드를 짜지 않을 수 있을까? 어떻게 하면 이 코드를 좋은 코드로 바꿀 수 있을까?라는 의문점이 생겼다. 그래서 미루고 미뤄왔던 클린코드를 읽어보려고 한다.</p>\n<h3 id=\"코드가-존재하리라\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EA%B0%80-%EC%A1%B4%EC%9E%AC%ED%95%98%EB%A6%AC%EB%9D%BC\" aria-label=\"코드가 존재하리라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드가 존재하리라</h3>\n<p>요즘 기술이 발전함에 따라 코드를 자동으로 생성해주는 기술들이 생겨나기 시작했다. 그럼에도 저자는 코드가 사라질 가망이 없다고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"궁긍적으로 코드는 요구사항을 표현하는 언어라는 사실을 명심한다. \r\n요구사항에 더욱 가까운 언어를 만들 수도 있고, 요구사항에서 정형 구조를 뽑아내는 도구를 만들 수도 있다. \r\n하지만 어느 순간에는 정밀한 표현이 필요하다.\r\n그 필요성을 없앨 방법은 없다.\r\n\r\n그러므로 코드도 항상 존재하리라.\"</code></pre></div>\n<h3 id=\"나쁜-코드\" style=\"position:relative;\"><a href=\"#%EB%82%98%EC%81%9C-%EC%BD%94%EB%93%9C\" aria-label=\"나쁜 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>나쁜 코드</h3>\n<p>80년대 후반 킬러 앱 하나를 구현한 회사를 이야기하면서 시작한다.<br>\n회사가 망했는데, 그 원인은 바로 나쁜 코드 탓이었다.<br>\n나쁜 코드에 발목이 잡혀 고생하는 것을 고행(Wading)이라 부른다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">우리 모두는 자신이 짠 쓰레기 코드를 쳐다보며 나중에 손보겠다고 생각한 경험이 있다. \r\n우리 모두는 대충 짠 프로그램이 돌아간다는 사실에 안도감을 느끼며 그래도 안 돌아가는 프로그램보다 돌아가는 쓰레기가 좋다고 스스로를 위로한 경험이 있다. \r\n다시 돌아와 나중에 정리하겠다고 다짐했었따.\r\n물론 그때 그 시절 우리는 르블랑의 법칙(Leblanc's Law)을 몰랐다.\r\n\r\n나중은 결코 오지 않는다.</code></pre></div>\n<h3 id=\"나쁜-코드로-치르는-대가\" style=\"position:relative;\"><a href=\"#%EB%82%98%EC%81%9C-%EC%BD%94%EB%93%9C%EB%A1%9C-%EC%B9%98%EB%A5%B4%EB%8A%94-%EB%8C%80%EA%B0%80\" aria-label=\"나쁜 코드로 치르는 대가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>나쁜 코드로 치르는 대가</h3>\n<p>나쁜 코드가 쌓일수록 팀 생산성은 떨어진다.<br>\n그러다 팀은 재설계를 요구한다.<br>\n새로운 프로젝트를 시작하기 때문에 모두가 합류하고 싶어한다.<br>\n나도 그렇다… 처음부터 시작해 진정으로 아름다운 작품을 창조할 기회니까.<br>\n재설계는 10년이 넘을 수도 있다.<br>\n그러다 보면 원년 멤버는 사라져있고, 새로운 팀원들이 새 시스템을 설계하고자 나선다.<br>\n즉, 깨끗한 코드를 만드는 노력은 전문가로서 살아남는 길이라는 사실이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">자신이 의사라 가정하자.\r\n어느 환자가 수술 전에 손을 씻지 말라고 요구한다.\r\n시간이 너무 걸리니까.\r\n확실히 환자는 상사다.\r\n하지만 의사는 단호하게 거부한다.\r\n왜? 질병과 감염의 위험은 환자보다 의사가 더 잘 아니까.\r\n환자 말을 그대로 따르는 행동은 (범죄일 뿐만 아니라) 전문가답지 못하니까.\r\n\r\n프로그래머도 마찬가지다.\r\n나쁜 코드의 위험을 이해하지 못하는 관리자 말을 그대로 따르는 행동은 전문가답지 못하다.</code></pre></div>\n<ul>\n<li>중요한 워딩 : 가독성, 명쾌한 추상화, TDD, 주의</li>\n</ul>\n<p>-> <strong>중복을 피하라, 한 기능만 수행하라, 제대로 표현하라, 작게 추상화하라</strong></p>\n<h3 id=\"보이스카우트-규칙\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EC%9D%B4%EC%8A%A4%EC%B9%B4%EC%9A%B0%ED%8A%B8-%EA%B7%9C%EC%B9%99\" aria-label=\"보이스카우트 규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>보이스카우트 규칙</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"캠프장은 처음 왔을 때보다 더 깨끗하게 해놓고 떠나라\"</code></pre></div>\n<p>지속적인 개선이야말로 전문가 정신의 본질이다.</p>\n<h3 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h3>\n<p>이 책을 통해 여러 방법을 익히고, 느껴야한다.<br>\n그렇게 체득한 후에 개선점을 생각하고, 나의 가치를 올릴 수 있는 방향으로 나아가야겠다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#intro\">Intro</a></p>\n<ul>\n<li><a href=\"#%EC%BD%94%EB%93%9C%EA%B0%80-%EC%A1%B4%EC%9E%AC%ED%95%98%EB%A6%AC%EB%9D%BC\">코드가 존재하리라</a></li>\n<li><a href=\"#%EB%82%98%EC%81%9C-%EC%BD%94%EB%93%9C\">나쁜 코드</a></li>\n<li><a href=\"#%EB%82%98%EC%81%9C-%EC%BD%94%EB%93%9C%EB%A1%9C-%EC%B9%98%EB%A5%B4%EB%8A%94-%EB%8C%80%EA%B0%80\">나쁜 코드로 치르는 대가</a></li>\n<li><a href=\"#%EB%B3%B4%EC%9D%B4%EC%8A%A4%EC%B9%B4%EC%9A%B0%ED%8A%B8-%EA%B7%9C%EC%B9%99\">보이스카우트 규칙</a></li>\n<li><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 27, 2024","title":"1장 깨끗한 코드","categories":"Clean_Code","author":"신승민","emoji":"🥭"},"fields":{"slug":"/[Clean Code] 1장 깨끗한 코드/"}},"prev":{"id":"7338da3f-242d-511b-bb5a-c64a2bbe6112","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>추상화 수준이 너무 다양하고 코드가 길다.<br>\n두 겹으로 중첩된 if문은 이상한 플래그를 확인하고, 이상한 문자열을 사용하며, 이상한 함수를 호출한다.<br>\n코드를 이해하기가 어렵다.<br>\n하지만 매서드 몇 개를 추출하고, 이름 몇 개를 변경하고, 구조를 조금 변경하면 파악하기 어려웠던 정보가 쉽게 드러난다.</p>\n<h3 id=\"작게-만들어라\" style=\"position:relative;\"><a href=\"#%EC%9E%91%EA%B2%8C-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%9D%BC\" aria-label=\"작게 만들어라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>작게 만들어라</h3>\n<p>100줄 ~ 300줄 함수도 있고 20줄 ~ 30줄 함수도 있다.<br>\n최대한 작으면 작을 수록 좋다.<br>\n심지어 2줄 ~ 4줄인 함수도 있다.<br>\n줄일 수 있다면 줄이는게 좋다.</p>\n<ul>\n<li>블록과 들여쓰기\n<ul>\n<li>if문 / else문 / while 문 등에 들어가는 블록은 한 줄이어야 한다. -> 대개 여기서 함수를 호출한다</li>\n<li>함수에서 들여쓰기 수준은 1단이나 2단을 넘어서면 안 된다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"한-가지만-해라\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EA%B0%80%EC%A7%80%EB%A7%8C-%ED%95%B4%EB%9D%BC\" aria-label=\"한 가지만 해라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 가지만 해라!</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"함수는 한 가지를 해야 한다. 그 한 가지를 잘 해야 한다. 그 한 가지만을 해야 한다.\"</code></pre></div>\n<p>우리가 함수를 만드는 이유는 큰 개념을 다음 추상화 수준에서 여러 단계로 나눠 수행하기 위해서이다.<br>\n그렇기 때문에 단순히 다른 표현이 아니라 의미 있는 이름으로 <strong>다른 함수</strong>를 추출할 수 있다면,<br>\n그 함수는 <strong>여러 작업</strong>을 하는 셈이다.</p>\n<h3 id=\"함수당-추상화-수준은-하나로\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EB%8B%B9-%EC%B6%94%EC%83%81%ED%99%94-%EC%88%98%EC%A4%80%EC%9D%80-%ED%95%98%EB%82%98%EB%A1%9C\" aria-label=\"함수당 추상화 수준은 하나로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수당 추상화 수준은 하나로!</h3>\n<p>함수가 확실히 ‘한 가지’ 작업만 하려면 함수 내 모든 문장의 추상화 수준이 동일해야 한다.</p>\n<ul>\n<li>위에서 아래로 코드 읽기 : <strong>내려가기</strong> 규칙\n<ul>\n<li>위에서 아래로 프로그램을 읽으면 함수 추상화 수준이 한 번에 한 단계씩 낮아진다.</li>\n</ul>\n</li>\n</ul>\n<p>추상화 수준이 하나인 함수를 구현하는게 쉽지 않겠지만 매우 중요한 규칙이다.</p>\n<h3 id=\"switch문\" style=\"position:relative;\"><a href=\"#switch%EB%AC%B8\" aria-label=\"switch문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Switch문</h3>\n<p>5가지 문제가 있다.</p>\n<ol>\n<li>함수가 길다.</li>\n<li>‘한 가지’ 작업만 수행하지 않는다.</li>\n<li>SRP(Single Responsibility Principle) - 코드를 변경할 이유가 여럿이기 때문</li>\n<li>OCP(Open Closed Principle) - 새 직원을 추가할 때마다 코드를 변경하기 때문</li>\n<li>구조가 동일한 함수가 무한정 존재</li>\n</ol>\n<p><strong>[ 해결 방법 ]</strong></p>\n<p>다형성을 이용하여 switch문을 저차원 클래스에 숨기고 절대로 반복하지 않는 방법이 있다.<br>\nswitch문을 추상 팩토리에 숨기고, 팩토리는 switch문을 사용해 적절한 파생 클래스의 인스턴스를 생성한다.<br>\n다른 함수들은 인터페이스를 거쳐서 호출된다.<br>\n그러면 다형성으로 인해 실제 파생 클래스의 함수가 실행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPayday</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">Money</span> <span class=\"token function\">calculatePay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deliverPay</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Money</span> pay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">EmployeeFactory</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span> <span class=\"token function\">makeEmployee</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EmployeeRecord</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InvalidEmployeeType</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeFactoryImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">EmployeeFactory</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span> <span class=\"token function\">makeEmployee</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EmployeeRecord</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InvalidEmployeeType</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">case</span> <span class=\"token constant\">COMMISIONED</span><span class=\"token operator\">:</span>\r\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CommisionedEmployee</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">case</span> <span class=\"token constant\">HOURLY</span><span class=\"token operator\">:</span>\r\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HourlyEmployee</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">case</span> <span class=\"token constant\">SALARIED</span><span class=\"token operator\">:</span>\r\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SalariedEmployee</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\r\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidEmployeeType</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"서술적인-이름을-사용하라\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EC%88%A0%EC%A0%81%EC%9D%B8-%EC%9D%B4%EB%A6%84%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\"서술적인 이름을 사용하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서술적인 이름을 사용하라!</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"코드를 읽으면서 짐작했던 기능을 각 루틴이 그대로 수행한다면 깨끗한 코드라 불러도 되겠다.\"</code></pre></div>\n<p>이름이 길어도 괜찮다.<br>\n길고 서술적인 이름이 짧고 어려운 이름보다 좋다.<br>\n길고 서술적인 이름이 길고 서술적인 주석보다 좋다.</p>\n<h3 id=\"함수-인수\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%EC%9D%B8%EC%88%98\" aria-label=\"함수 인수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 인수</h3>\n<p>😊 0개 -------------------------------- 4개 이상 😞<br>\n인수가 있으면 함수 이름과 인수 사이에 추상화 수준이 다르기 때문에<br>\n코드를 읽는 사람이 이해하기 어렵다.</p>\n<ul>\n<li>많이 쓰는 단항 형식\n<ul>\n<li>인수에 질문을 던지는 경우(boolean fileExists(“MyFile”))</li>\n<li>인수를 뭔가로 변환해 결과를 반환하는 경우(InputStream fileOpen(“MyFile”))</li>\n</ul>\n</li>\n<li>플래그 인수\n<ul>\n<li>함수로 부울 값을 넘기는 관례는 정말 끔찍하다.</li>\n</ul>\n</li>\n<li>이항 함수\n<ul>\n<li>인수가 1개인 함수보다 이해하기 어렵다.</li>\n<li>Point p = new Point(0, 0); 이런 경우엔 적절하다.</li>\n</ul>\n</li>\n<li>삼항 함수\n<ul>\n<li>인수가 2개인 함수보다 이해하기 어렵다.</li>\n<li>매번 함수를 볼 때마다 주춤해진다.</li>\n</ul>\n</li>\n<li>인수 객체\n<ul>\n<li>객체를 생성해 인수를 줄이는 방법 (Circle makeCircle(double x, double y, double radius) &#x26;&#x26; Circle makeCircle(Point center, double radius))</li>\n</ul>\n</li>\n<li>인수 목록\n<ul>\n<li>인수 개수가 가변적인 함수도 필요하다.</li>\n<li>String.format(“%s worked %.2f hours.”, name, hours);</li>\n</ul>\n</li>\n<li>동사와 키워드\n<ul>\n<li>함수의 의도나 인수의 순서와 의도를 제대로 표현하려면 좋은 함수 이름은 필수.</li>\n<li>인수가 동사/명사 쌍을 이뤄야 한다.</li>\n<li>함수 이름에 키워드를 추가하는 방법도 있다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"부수-효과를-일으키지-마라\" style=\"position:relative;\"><a href=\"#%EB%B6%80%EC%88%98-%ED%9A%A8%EA%B3%BC%EB%A5%BC-%EC%9D%BC%EC%9C%BC%ED%82%A4%EC%A7%80-%EB%A7%88%EB%9D%BC\" aria-label=\"부수 효과를 일으키지 마라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>부수 효과를 일으키지 마라!</h3>\n<p>부수 효과는 거짓말이다.<br>\n시간적인 결합(temporal coupling) 이나 순서 종속성(order dependency)을 초래한다.</p>\n<p><code class=\"language-text\">public boolean checkPassword(String userName, String password){}</code>이라는 함수가 있다.<br>\n함수 이름만 봐서는 암호를 확인하는 함수다.<br>\n하지만 Session.initialize() 호출이 있다.<br>\n이름만 봐서는 세션을 초기화한다는 사실이 드러나지 않는다.</p>\n<ul>\n<li>출력 인수<br>\n<code class=\"language-text\">appendFooter(s);</code><br>\n이 함수에서 인수 s는 입력일까 출력일까?<br>\n함수 선언부를 찾아보면 분명해진다.<br>\n<code class=\"language-text\">public void appendFooter(StringBuffer report)</code><br>\n인수 s는 출력 인수지만, 이렇게 찾아보는 것은 인지적으로 거슬린다는 것이기에 피해야한다.<br>\n<code class=\"language-text\">report.appendFooter()</code><br>\n출력 인수로 사용하라고 설계한 <code class=\"language-text\">this</code>를 활용하여 이렇게 작성하도록 하자.</li>\n</ul>\n<h3 id=\"명령과-조회를-분리하라\" style=\"position:relative;\"><a href=\"#%EB%AA%85%EB%A0%B9%EA%B3%BC-%EC%A1%B0%ED%9A%8C%EB%A5%BC-%EB%B6%84%EB%A6%AC%ED%95%98%EB%9D%BC\" aria-label=\"명령과 조회를 분리하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명령과 조회를 분리하라!</h3>\n<p>함수는 뭔가를 수행하거나 뭔가에 답하거나 둘 중 <strong>하나</strong>만 해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> attribute<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> value<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 함수를</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"unclebob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>이렇게 사용하면 어색하다.<br>\nset이 00속성이 ㅁㅁ으로 설정되어 있다면…으로 읽힌다.<br>\n명령과 조회를 분리해 혼란을 뿌리뽑자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">attributeExists</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"unclebob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"오류-코드보다-예외를-사용하라\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%EC%BD%94%EB%93%9C%EB%B3%B4%EB%8B%A4-%EC%98%88%EC%99%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\"오류 코드보다 예외를 사용하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 코드보다 예외를 사용하라!</h3>\n<p>오류 코드를 반환하면 호출자는 곧바로 처리해야한다.<br>\nif문을 엄청 쓰게 되는 것이다.<br>\n하지만 예외 처리를 해주면 try-catch로 코드가 깔끔해진다.</p>\n<ul>\n<li>Try/Catch 블록 뽑아내기</li>\n</ul>\n<p>try-catch 블록은 원래 추하다.<br>\n블록을 별도 함수로 뽑아내는 편이 좋다.</p>\n<ul>\n<li>오류 처리도 한 가지 작업이다.</li>\n</ul>\n<p>함수에 키워드 try가 있다면 함수는 try문으로 시작해 catch/finally문으로 끝나야 한다.</p>\n<ul>\n<li>Error.java 의존성 자석</li>\n</ul>\n<p>오류 코드를 반환한다는 것은 오류코드를 어딘가에 정의해둔다는 것이다.<br>\n오류 코드 대신 예외를 사용하면 새 예외는 Exceptoin 클래스에서 파생된다.<br>\n따라서 재컴파일/재배치 없이도 새 예외 클래스를 추가할 수 있다.</p>\n<h3 id=\"반복하지-마라\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EB%B3%B5%ED%95%98%EC%A7%80-%EB%A7%88%EB%9D%BC\" aria-label=\"반복하지 마라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반복하지 마라!</h3>\n<p>중복은 소프트웨어에서 모든 악의 근원이다.<br>\n구조적 프로그래밍, AOP, COP 등 모두 어떤 면에서는 중복 제거 전략이다.<br>\ninclude를 활용하여 제거하는 방법도 있다.</p>\n<h3 id=\"구조적-프로그래밍\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0%EC%A0%81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"구조적 프로그래밍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조적 프로그래밍</h3>\n<p>함수 내의 모든 블록에 입구와 출구는 하나만 존재해야 한다.<br>\n<strong>goto</strong>는 절대로!! 안 된다.\r\n함수가 작을 때 간혹 return, break, continue는 괜찮다.</p>\n<h3 id=\"함수를-어떻게-짜죠\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%A7%9C%EC%A3%A0\" aria-label=\"함수를 어떻게 짜죠 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수를 어떻게 짜죠?</h3>\n<ol>\n<li>초안을 짠다.</li>\n<li>코드를 다듬는다.</li>\n<li>함수를 만든다.</li>\n<li>이름을 바꾼다.</li>\n<li>중복을 제거한다.</li>\n<li>메서드를 줄이고 순서를 바꾼다.</li>\n</ol>\n<blockquote>\n<p>이 와중에도 코드는 항상 단위 테스트를 통과한다.</p>\n</blockquote>\n<h3 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"내가 작성하는 함수가 분명하고 정확한 언어로 깔끔하게 같이 맞아떨어져야 \r\n이야기를 풀어가긱가 쉬워진다는 사실을 기억하자.</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#intro\">Intro</a></p>\n<ul>\n<li><a href=\"#%EC%9E%91%EA%B2%8C-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%9D%BC\">작게 만들어라</a></li>\n<li><a href=\"#%ED%95%9C-%EA%B0%80%EC%A7%80%EB%A7%8C-%ED%95%B4%EB%9D%BC\">한 가지만 해라!</a></li>\n<li><a href=\"#%ED%95%A8%EC%88%98%EB%8B%B9-%EC%B6%94%EC%83%81%ED%99%94-%EC%88%98%EC%A4%80%EC%9D%80-%ED%95%98%EB%82%98%EB%A1%9C\">함수당 추상화 수준은 하나로!</a></li>\n<li><a href=\"#switch%EB%AC%B8\">Switch문</a></li>\n<li><a href=\"#%EC%84%9C%EC%88%A0%EC%A0%81%EC%9D%B8-%EC%9D%B4%EB%A6%84%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\">서술적인 이름을 사용하라!</a></li>\n<li><a href=\"#%ED%95%A8%EC%88%98-%EC%9D%B8%EC%88%98\">함수 인수</a></li>\n<li><a href=\"#%EB%B6%80%EC%88%98-%ED%9A%A8%EA%B3%BC%EB%A5%BC-%EC%9D%BC%EC%9C%BC%ED%82%A4%EC%A7%80-%EB%A7%88%EB%9D%BC\">부수 효과를 일으키지 마라!</a></li>\n<li><a href=\"#%EB%AA%85%EB%A0%B9%EA%B3%BC-%EC%A1%B0%ED%9A%8C%EB%A5%BC-%EB%B6%84%EB%A6%AC%ED%95%98%EB%9D%BC\">명령과 조회를 분리하라!</a></li>\n<li><a href=\"#%EC%98%A4%EB%A5%98-%EC%BD%94%EB%93%9C%EB%B3%B4%EB%8B%A4-%EC%98%88%EC%99%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\">오류 코드보다 예외를 사용하라!</a></li>\n<li><a href=\"#%EB%B0%98%EB%B3%B5%ED%95%98%EC%A7%80-%EB%A7%88%EB%9D%BC\">반복하지 마라!</a></li>\n<li><a href=\"#%EA%B5%AC%EC%A1%B0%EC%A0%81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">구조적 프로그래밍</a></li>\n<li><a href=\"#%ED%95%A8%EC%88%98%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%A7%9C%EC%A3%A0\">함수를 어떻게 짜죠?</a></li>\n<li><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 30, 2024","title":"3장 함수","categories":"Clean_Code","author":"신승민","emoji":"🍫"},"fields":{"slug":"/[Clean Code] 3장 함수/"}},"site":{"siteMetadata":{"siteUrl":"https://maljaaa.github.io","comments":{"utterances":{"repo":"maljaaa/maljaaa.github.io"}}}}},"pageContext":{"slug":"/[Clean Code] 2장 의미있는 이름/","nextSlug":"/[Clean Code] 1장 깨끗한 코드/","prevSlug":"/[Clean Code] 3장 함수/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}