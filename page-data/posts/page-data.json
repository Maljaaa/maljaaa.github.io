{"componentChunkName":"component---src-templates-category-template-js","path":"/posts","result":{"pageContext":{"currentCategory":"All","edges":[{"node":{"id":"cb6dd4b5-4ee9-5117-88e1-4d070e399e24","excerpt":"Intro 회사에서 하는 일이 아닌, 개인 사이드 프로젝트를 시작했다.\n어떤 서비스를 만들지 고민하고,\n어떤 요구사항이 필요할지 정리했다.\n그리고 세부 요구사항과 개발 스펙을 정리하면서 ERD를 작성했다.\nERD를 작성하고 나서는 뭘 해야할까?\nDB를 구축해야할 것이다.\n그래서 나는 로컬에서 간단하고 빠르게 실행하기 위하여 Docker에 Postgresql를 설치하고 실행했다. PostgreSQL 이미지 다운로드 가장 먼저 이미지를 다운로드 받아야 한다. 나는 버전에 상관없이 PostgerSQL을 사용할 수 있기 때문에 latest로 다운받았다.\n만약 특정 버전이 필요하다면 :latest가 아니라 으로 작성하면 될 것이다. 볼륨 생성 Docker Desktop에서도 생성이 가능하지만, 나는 명령어가 편하다. 컨테이너 실행 —name my-postgres : 컨테이너 이름 지정 -e POSTGRES_PASSWORD : DB서버 패스워드 입력(필수), 나머지 환경 변수는 옵션이다. 자…","fields":{"slug":"/Postgresql in docker/"},"frontmatter":{"categories":"Docker","title":"Postgresql in docker","date":"July 18, 2024"}},"next":{"fields":{"slug":"/PRG/"}},"previous":null},{"node":{"id":"8dae09df-6081-55e1-aedc-a9ddd8263d3d","excerpt":"Intro 코드를 보다가 Redirect Strategy 부분의 코드를 보게 되었다. 평소에 알던 리다이렉트는 그저 서버가 어떤 URL로 강제로 View를 보여주는 것이라고만 생각해왔다. 하지만 이번 공부를 통해 조금 다른 부분까지 알게 되어서 정리해보고자 한다. 멱등성 PRG패턴을 이야기하는데 있어서 가장 먼저 이야기해야하는 것은 멱등성이다. 멱등성이란, 연산을 여러번 적용하더라도 결과가 달라지지 않는 성질을 의미한다. 그렇다면 웹에서는 , , , 는 멱등성을 가진다라고 말할 수 있다. 하지만 는 멱등성을 가지지 않는다. 예를 들어보면, 은 얼마든지 자주 호출해도 같은 결과를 나타내지만, 게시글을 등록하는 를 연달아 호출하면 호출한 횟수만큼 게시글이 등록된다. 하지만 REDIRECT가 아니라 FORWARD로 처리할 경우 새로고침 시 게시글 작성/주문이 중복해서 처리될 수 있다. PRG 패턴 위와 같은 이유로 PSG 패턴은 꼭 필요하다. 그렇다면 더 자세히 알아보자. 은 웹 개발 …","fields":{"slug":"/PRG/"},"frontmatter":{"categories":"SpringMVC","title":"PRG(Post-Redirect-Get)","date":"June 04, 2024"}},"next":{"fields":{"slug":"/Apps Script/"}},"previous":{"fields":{"slug":"/Postgresql in docker/"}}},{"node":{"id":"49e0c55a-5127-5e20-a0ea-923d165971a9","excerpt":"Intro 저번 Google Sheets API에 이어서, 이번엔 Google Apps Script이다. 난 시트 내에서 계산식이 자동으로 다음줄에도 계산이 되어야한다는 요구사항을 받았다. 그래서 여러 방법을 고민하기 시작했다… Google Sheets 내의 함수나 기능 활용하기 Java/Javascript 로 가져와서 계산식을 적용하고 다시 뿌려주기 Apps Script 활용하기 1번은 찾지 못했다. 2번은 작성해야 하는 코드가 많아서 번거로웠다. 그래서 나는 3번인 Apps Script를 활용하기로 결정했다. 앱 스크립트(App Script) 는 구글 워크스페이스 플랫폼에서 가벼운 애플리케이션 개발을 위해 구글이 개발한 스크립팅 플랫폼이다. 난 이걸 활용하여 자동으로 계산식에 이어서 계산이 되는 기능을 구현하고자 한다. 하지만 난 Apps Script가 처음이기 때문에 어떻게 접근해야할 지 몰랐다. 그러다 팀장님이 귀뜸해주신 말씀에 도움을 얻어서 매크로를 활용했다. 매크로를 기…","fields":{"slug":"/Apps Script/"},"frontmatter":{"categories":"Google_Sheets","title":"Google Apps Script","date":"May 27, 2024"}},"next":{"fields":{"slug":"/Google Sheets API/"}},"previous":{"fields":{"slug":"/PRG/"}}},{"node":{"id":"44121dc5-7f70-5eac-ac7f-327db995f1e0","excerpt":"Intro 회사에서 수습사원을 떼고, 첫 업무가 주어졌다!!! 유관부서에서 Google Sheets로 대시보드처럼 사용하고 있었는데, Google Sheets에서 편집한게 우리가 사용하는 웹 사이트에도 보였으면 좋겠다는 요구였다. 정리해보자! Google Sheets가 DB에 연동이 되어야한다. Google Sheets에서 계산식이 자동으로 적용되어야 한다. Google Sheets에서 변경된 내용은 웹사이트에도 반영되어야 한다. 웹사이트에서 변경한 내용이 Google Sheets에 반영되어야 한다. 적용된 계산식은 Google Sheets에만 보여야 한다. 많은 고민이 있었다. 어떻게 해야 Google Sheets를 내 프로젝트에 가져올 수 있을까? 그리고 그걸 DB에 연동할 수 있을까? 나는 비용을 발생시켜서도 안되고, 그렇다고 제대로 만들지 않을 수 없다. 내가 고민한 방법은 다음과 같다. PI를 활용하기 -> 비용이 나갈 수 있기에 후 순위에 두었다. 크롤링 - 시트 열람하…","fields":{"slug":"/Google Sheets API/"},"frontmatter":{"categories":"Google_Sheets","title":"Google Sheets API","date":"May 22, 2024"}},"next":{"fields":{"slug":"/Swagger vs Spring REST Docs/"}},"previous":{"fields":{"slug":"/Apps Script/"}}},{"node":{"id":"2cbc5046-2440-56be-8f61-8d087d6d0ff5","excerpt":"앞서서 저희 회사에서 api 개발하는 것을 보며, 저도 언젠가 저렇게 멋진 API를 만들겠다고 다짐했습니다. 그러기 위해서 RESTful API에 대해서 공부를 시작했습니다. 먼저 API 명세서를 작성하는 방법에 대해서 알아보았습니다. 찾아본 여러 방법 중에서 가장 자료가 많았던 것은 Swagger와 Spring REST Docs입니다. 둘이 어떻게 다르고 어떤 특징이 있는지 알아보겠습니다. 그 전에! OAS가 뭔지는 알아야 합니다.\n블로그를 볼 때마다 나와서 찾아봐야 했거든요.. OAS(Open API Specification) OAS는 “개발자가 RESTful API를 쉽게 관리하고 사용할 수 있게 도와주는 표준 명세 작성 방식”이라고 이해하면 됩니다. JSON, YAML 형식으로 작성된다는 것을 알고 다음 코드를 봅시다. 자세한 형식은 공식 문서를 참고해주세요. Swagger \nSwagger는 Controller에 몇 가지의 어노테이션을 달기만 해도 API 문서가 만들어집니다…","fields":{"slug":"/Swagger vs Spring REST Docs/"},"frontmatter":{"categories":"API","title":"Swagger vs Spring REST Docs","date":"May 16, 2024"}},"next":{"fields":{"slug":"/SOA/"}},"previous":{"fields":{"slug":"/Google Sheets API/"}}},{"node":{"id":"5cfbdc71-33b4-557b-8ef3-3069ff78754d","excerpt":"Intro 최근 들어보면 다들 MSA MSA MSA 하는 것 같다. 도대체 MSA가 뭘까? 강의를 들어보려니, 너무나 가격대가 비쌌다. 다양한 시스템을 각자가 만들어서 합쳐버리는건가? 난 잘 몰랐다. 그러다 우리 회사에서 미팅을 했을 때, 난 호기심이 생겼다. 우리 회사는 MA도 MSA도 아닌 SOA를 도입하려고 한다. 이 세 아키텍처의 차이점은 무엇이고, 왜 우리는 SOA를 도입하려고 하는가? SOA(Service Oriented Architecture) \n서비스 지향 아키텍처란? 기업의 소프트웨어 인프라인 정보시스템을 공유와 재사용이 가능한 서비스 단위나 컴포넌트 중심으로 구축하는 정보기술 아키텍처이다. ESB(엔터프라이즈 서비스 버스)로 중앙 집권식이다. 장점 비즈니스 민첩성 향상, 시장 출시 속도 개선 요구사항 반영이 수월하고 대응이 신속해진다. 신규 시장에서 레거시 기능을 활용하는 능력 기존 기능을 사용할 수 있고 이를 신규 환경과 시장으로 확장할 수 있다. 하나의 DB를…","fields":{"slug":"/SOA/"},"frontmatter":{"categories":"Architecture","title":"SOA(Service Oriented Architecture)","date":"May 16, 2024"}},"next":null,"previous":{"fields":{"slug":"/Swagger vs Spring REST Docs/"}}}],"categories":["All","Docker","SpringMVC","Google_Sheets","API","Architecture"]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}