{"componentChunkName":"component---src-templates-blog-template-js","path":"/[Clean Code] 7장 오류 처리/","result":{"data":{"cur":{"id":"b423f2de-1599-5017-9058-9489e4605a7c","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>깨끗한 코드와 오류 처리는 확실히 연관성이 있다.<br>\n여기저기 흩어진 오류 처리 코드 때문에 실제 코드가 하는 일을 파악하기가 거의 불가능하다.</p>\n<h3 id=\"오류-코드보다-예외를-사용하라\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%EC%BD%94%EB%93%9C%EB%B3%B4%EB%8B%A4-%EC%98%88%EC%99%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\"오류 코드보다 예외를 사용하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 코드보다 예외를 사용하라</h3>\n<p>예전에는 <strong>오류 플래그</strong>를 설정하거나 호출자에게 오류 코드를 <strong>반환</strong>하는 방법이 전부였다.<br>\n이런 방법을 사용하면 호출자 코드가 복잡해진다.<br>\n그래서 오류가 발생하면 예외를 던지는 편이 낫다.<br>\n논리가 오류 처리 코드와 뒤섞이지 않으니까 말이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendShutDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">tryToShutDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DeviceShutDownError</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">tryToShutDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">DeviceShutDownError</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>뒤섞였던 개념을 알고리즘에 따라 분리함으로써 각 개념을 독립적으로 살펴보고 이해할 수 있다.</p>\n<h3 id=\"try-catch-finally-문부터-작성하라\" style=\"position:relative;\"><a href=\"#try-catch-finally-%EB%AC%B8%EB%B6%80%ED%84%B0-%EC%9E%91%EC%84%B1%ED%95%98%EB%9D%BC\" aria-label=\"try catch finally 문부터 작성하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Try-Catch-Finally 문부터 작성하라</h3>\n<p>try 블록에서 무슨 일이 생기든지 호출자가 기대하는 상태를 정의하기 쉬워진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RecordedGrip</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">retrieveSection</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sectionName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">FileInputStream</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>sectionName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        stream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StorageException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"retrieval error\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RecordedGrip</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 <code class=\"language-text\">FileInputStream</code> 생성자가 던지는 <code class=\"language-text\">FileNotFoundException</code>을 잡아낼 수 있다.</p>\n<ol>\n<li>강제로 예외를 일으키는 테스트 케이스 작성</li>\n<li>테스트를 통과하게 코드 작성</li>\n</ol>\n<p>-> try 블록의 트랜잭션 범위부터 구현하게 되므로 범위 내에서 트랜잭션 본질을 유지하기 쉬워진다.</p>\n<h3 id=\"미확인unchecked-예외를-사용하라\" style=\"position:relative;\"><a href=\"#%EB%AF%B8%ED%99%95%EC%9D%B8unchecked-%EC%98%88%EC%99%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\"미확인unchecked 예외를 사용하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>미확인(Unchecked) 예외를 사용하라</h3>\n<p>확인된 예외는 OCP(Open Closed Principle)를위반한다.<br>\n하위 단계에서 코드를 변경하면 상위 단계 메서드 선언부를 전부 고쳐야 한다.<br>\n모듈과 관련된 코드가 전혀 바뀌지 않았더라도 (선언부가 바뀌었으므로)<br>\n모듈을 다시 빌드한 다음 배포해야 한다.</p>\n<p>연쇄적인 수정이 일어난다!<br>\nThrows 경로에 위치하는 모든 함수가 최하위 함수에서 던지는 예외를 알아야 하므로 <strong>캡슐화</strong>가 깨진다.</p>\n<h3 id=\"예외에-의미를-제공하라\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%99%B8%EC%97%90-%EC%9D%98%EB%AF%B8%EB%A5%BC-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%9D%BC\" aria-label=\"예외에 의미를 제공하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외에 의미를 제공하라</h3>\n<p>전후 상황을 충분히 덧붙이면, 오류가 발생한 원인과 위치를 찾기 쉬워진다.<br>\n실패한 연산 이름과 실패 유형도 언급한다.<br>\n로깅 기능을 사용한다면 catch 블록에서 오류를 기록하도록 충분한 정보를 넘겨준다.</p>\n<h3 id=\"호출자를-고려해-예외-클래스를-정의하라\" style=\"position:relative;\"><a href=\"#%ED%98%B8%EC%B6%9C%EC%9E%90%EB%A5%BC-%EA%B3%A0%EB%A0%A4%ED%95%B4-%EC%98%88%EC%99%B8-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC\" aria-label=\"호출자를 고려해 예외 클래스를 정의하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>호출자를 고려해 예외 클래스를 정의하라</h3>\n<p><code class=\"language-text\">오류를 분류하는 방법</code>보다 <code class=\"language-text\">오류를 잡아내는 방법</code>에 관심을 두자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ACMEPort</span> port <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ACMEPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n    port<span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DeviceResponseException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">reportPortError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ATM1212UnlockedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">reportPortError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">GMXError</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">reportPortError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>중복이 심하다.<br>\n호출하는 라이브러리 API를 감싸면서 예외 유형 하나를 반환하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">LocalPort</span> port <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LocalPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n    port<span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PortDeviceFailure</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">reportError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 LocalPort 클래스는 단순히 ACMEPort 클래스가 던지는 예외를 잡아 변환하는 <code class=\"language-text\">wrapper</code> 클래스다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LocalPort</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ACMEPort</span> innerPort<span class=\"token punctuation\">;</span>\r\n    \r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LocalPort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> portNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        innerPort <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ACMEPort</span><span class=\"token punctuation\">(</span>portNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n            innerPort<span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DeviceResponseException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PortDeviceFailure</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ATM1212UnlockedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PortDeviceFailure</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">GMXError</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PortDeviceFailure</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>외부 API를 감싸면 외부 라이브러리와 프로그램 사이에서 의존성이 크게 줄어든다.<br>\n다른 라이브러리로 갈아타도 비용이 적다.<br>\n테스트하기도 쉬워진다.<br>\n특정 업체가 API를 설계한 방식에 발목 잡히지 않는다.</p>\n<h3 id=\"정상-흐름을-정의하라\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%83%81-%ED%9D%90%EB%A6%84%EC%9D%84-%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC\" aria-label=\"정상 흐름을 정의하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정상 흐름을 정의하라</h3>\n<p>식비를 비용으로 청구했다면 직원이 청구한 식비를 총계에 더한다.<br>\n식비를 비용으로 청구하지 않았다면 일일 기본 식비를 총계에 더한다.</p>\n<p>식비를 비용으로 청구하지 않았을 때 일일 기본 식비를 반환한다면?”<br>\n예외처리를 해줄 필요가 없다.</p>\n<p>이를 특수 사례 패턴(special case pattern)이라 부른다.<br>\n클래스를 만들거나 객체를 조작해 특수 사례를 처리하는 방식이다.</p>\n<h3 id=\"null을-반환하지-마라\" style=\"position:relative;\"><a href=\"#null%EC%9D%84-%EB%B0%98%ED%99%98%ED%95%98%EC%A7%80-%EB%A7%88%EB%9D%BC\" aria-label=\"null을 반환하지 마라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>null을 반환하지 마라</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>누구 하나라도 null 확인을 빼먹는다면 통제 불능에 빠질지도 모른다.<br>\nnull을 반환하는 것보다 예외를 던지거나 특수 사례 객체를 반환하자.</p>\n<p>java에서 null을 반환하는 것보다 빈 리스트를 반환해보자.<br>\n<code class=\"language-text\">Collections.emptyList()</code>가 있다.<br>\nNullpointerException이 발생할 가능성도 줄어든다.</p>\n<h3 id=\"null을-전달하지-마라\" style=\"position:relative;\"><a href=\"#null%EC%9D%84-%EC%A0%84%EB%8B%AC%ED%95%98%EC%A7%80-%EB%A7%88%EB%9D%BC\" aria-label=\"null을 전달하지 마라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>null을 전달하지 마라</h3>\n<p>정상적인 인수로 null을 기대하는 API가 아니라면 메서드로 null을 전달하는 코드는 최대한 피한다.<br>\n대다수 프로그래밍 언어는 호출자가 실수로 넘기는 null을 적절히 처리하는 방법이 없다.<br>\n애초에 null을 넘기지 못하도록 금지하는 정책이 합리적이다.<br>\n인수로 null이 넘어오면 코드에 문제가 있다는 말이다.</p>\n<h3 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h3>\n<p>오류 처리를 프로그램 논리와 분리해 독자적인 사안으로 고려하면 튼튼하고 깨끗한 코드를 작성할 수 있다.<br>\n오류 처리를 프로그램 논리와 분리하면 독립적인 추론이 가능해지며 코드 유지보수성도 크게 높아진다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#intro\">Intro</a></p>\n<ul>\n<li><a href=\"#%EC%98%A4%EB%A5%98-%EC%BD%94%EB%93%9C%EB%B3%B4%EB%8B%A4-%EC%98%88%EC%99%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\">오류 코드보다 예외를 사용하라</a></li>\n<li><a href=\"#try-catch-finally-%EB%AC%B8%EB%B6%80%ED%84%B0-%EC%9E%91%EC%84%B1%ED%95%98%EB%9D%BC\">Try-Catch-Finally 문부터 작성하라</a></li>\n<li><a href=\"#%EB%AF%B8%ED%99%95%EC%9D%B8unchecked-%EC%98%88%EC%99%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\">미확인(Unchecked) 예외를 사용하라</a></li>\n<li><a href=\"#%EC%98%88%EC%99%B8%EC%97%90-%EC%9D%98%EB%AF%B8%EB%A5%BC-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%9D%BC\">예외에 의미를 제공하라</a></li>\n<li><a href=\"#%ED%98%B8%EC%B6%9C%EC%9E%90%EB%A5%BC-%EA%B3%A0%EB%A0%A4%ED%95%B4-%EC%98%88%EC%99%B8-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC\">호출자를 고려해 예외 클래스를 정의하라</a></li>\n<li><a href=\"#%EC%A0%95%EC%83%81-%ED%9D%90%EB%A6%84%EC%9D%84-%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC\">정상 흐름을 정의하라</a></li>\n<li><a href=\"#null%EC%9D%84-%EB%B0%98%ED%99%98%ED%95%98%EC%A7%80-%EB%A7%88%EB%9D%BC\">null을 반환하지 마라</a></li>\n<li><a href=\"#null%EC%9D%84-%EC%A0%84%EB%8B%AC%ED%95%98%EC%A7%80-%EB%A7%88%EB%9D%BC\">null을 전달하지 마라</a></li>\n<li><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"Intro 깨끗한 코드와 오류 처리는 확실히 연관성이 있다. 여기저기 흩어진 오류 처리 코드 때문에 실제 코드가 하는 일을 파악하기가 거의 불가능하다. 오류 코드보다 예외를 사용하라 예전에는 오류 플래그를 설정하거나 호출자에게 오류 코드를 반환하는 방법이 전부였다. 이런 방법을 사용하면 호출자 코드가 복잡해진다. 그래서 오류가 발생하면 예외를 던지는 편이 낫다. 논리가 오류 처리 코드와 뒤섞이지 않으니까 말이다. 뒤섞였던 개념을 알고리즘에 따라 분리함으로써 각 개념을 독립적으로 살펴보고 이해할 수 있다. Try-Catch-Finally 문부터 작성하라 try 블록에서 무슨 일이 생기든지 호출자가 기대하는 상태를 정의하기 쉬워진다. 여기서  생성자가 던지는 을 잡아낼 수 있다. 강제로 예외를 일으키는 테스트 케이스 작성 테스트를 통과하게 코드 작성 -> try 블록의 트랜잭션 범위부터 구현하게 되므로 범위 내에서 트랜잭션 본질을 유지하기 쉬워진다. 미확인(Unchecked) 예외를 …","frontmatter":{"date":"September 05, 2024","title":"7장 오류 처리","categories":"Clean_Code","author":"신승민","emoji":"🏭"},"fields":{"slug":"/[Clean Code] 7장 오류 처리/"}},"next":{"id":"d2e57b72-d352-581f-86a7-ca686b9cc6a5","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>변수를 <code class=\"language-text\">private</code>으로 정의하는 이유가 있다.<br>\n남들이 변수에 의존하지 않게 만들기 위해서다.<br>\n그렇다면 왜 많은 개발자들이 <code class=\"language-text\">get</code>함수와 <code class=\"language-text\">set</code>함수를 당연하게 <code class=\"language-text\">public</code>해 <code class=\"language-text\">private</code>변수를 외부에 노출할까?</p>\n<h3 id=\"자료-추상화\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%A3%8C-%EC%B6%94%EC%83%81%ED%99%94\" aria-label=\"자료 추상화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자료 추상화</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setCadrtesian</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getTheta</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setPolar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> theta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>더 나은 예시</p>\n</blockquote>\n<p>변수를 <strong>privat</strong>e으로 선언하더라도 각 값마다 <strong>get</strong>함수와 <strong>set</strong>함수를 제공한다면 구현을 외부로 노출하는 셈이다.<br>\n구현을 감추려면 <strong>추상화</strong>가 필요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vehicle</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getFuelTankCapacityInGallons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getGallonsOfGasoline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vehicle</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getPercentFuelRemaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>더 나은 예시</p>\n</blockquote>\n<p>인터페이스나 조회/설정 함수만으로는 추상화가 이뤄지지 않는다.<br>\n객체가 포함하는 자료를 표현할 가장 좋은 방법을 심각하게 고민해야 한다.</p>\n<h3 id=\"자료객체-비대칭\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%A3%8C%EA%B0%9D%EC%B2%B4-%EB%B9%84%EB%8C%80%EC%B9%AD\" aria-label=\"자료객체 비대칭 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자료/객체 비대칭</h3>\n<p>객체는 추상화 뒤로 자료를 숨긴 채 자료를 다루는 함수만 제공한다.<br>\n자료 구조는 자료를 그대로 공개하며 별다른 함수는 제공하지 않는다.</p>\n<ul>\n<li>절차 지향 코드의 장단점</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(자료 구조를 사용하는) 절차적인 코드는 기존 자료구조를 변경하지 않으면서\r\n새 함수를 추가하기 쉽다. 반면, 객체 지향 코드는 기존 함수를 변경하지 않으면서\r\n새 클래스를 추가하기 쉽다.</code></pre></div>\n<ul>\n<li>객체 지향 코드의 장단점</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">절차적인 코드는 새로운 자료 구조를 추가하기 어렵다. 그러려면 모든 함수를\r\n고쳐야 한다. 객체 지향 코드는 새로운 함수를 추가하기 어렵다.\r\n그러려면 모든 클래스를 고쳐야 한다.</code></pre></div>\n<p><strong>객체 지향 코드</strong>에서 어려운 변경은 절차 지향 코드에서 쉬우며,<br>\n<strong>절차 지향 코드</strong>에서 어려운 변경은 객체 지향 코드에서 쉽다!</p>\n<h3 id=\"디미터-법칙\" style=\"position:relative;\"><a href=\"#%EB%94%94%EB%AF%B8%ED%84%B0-%EB%B2%95%EC%B9%99\" aria-label=\"디미터 법칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디미터 법칙</h3>\n<p><strong>디미터 법칙</strong>은 잘 알려진 <strong>휴리스틱</strong>으로,<br>\n모듈은 자신이 조작하는 객체의 속사정을 몰라야 한다는 법칙이다.</p>\n<p>디미터 법칙은 <code class=\"language-text\">\"클래스 C의 매서드 f는 다음과 같은 객체의 매서드만 호출해야 한다\"</code>고 주장한다.</p>\n<ul>\n<li>클래스 C</li>\n<li>f가 생성한 객체</li>\n<li>f 인수로 넘어온 객체</li>\n<li>C 인스턴스 변수에 저장된 객체</li>\n</ul>\n<p>위 객체에서 허용된 매서드가 <code class=\"language-text\">반환</code>하는 객체의 매서드는 호출하면 안 된다.</p>\n<h4 id=\"기차-충돌\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%B0%A8-%EC%B6%A9%EB%8F%8C\" aria-label=\"기차 충돌 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기차 충돌</h4>\n<ul>\n<li>기차 충돌의 예</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> outputDir <span class=\"token operator\">=</span> ctxt<span class=\"token punctuation\">.</span><span class=\"token function\">getOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getScratchDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>해결</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Options</span> opts <span class=\"token operator\">=</span> ctxt<span class=\"token punctuation\">.</span><span class=\"token function\">getOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token class-name\">File</span> scratchDir <span class=\"token operator\">=</span> opts<span class=\"token punctuation\">.</span><span class=\"token function\">getScratchDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> outputDir <span class=\"token operator\">=</span> scratchDir<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>더 나은 방법</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> outputDir <span class=\"token operator\">=</span> ctxt<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>scratchDir<span class=\"token punctuation\">.</span>absolutePath<span class=\"token punctuation\">;</span></code></pre></div>\n<p>자료 구조는 무조건 함수 없이 공개 변수만 포함하고<br>\n객체는 비공개 변수와 공개 함수를 포함한다면, 문제는 간단하다.</p>\n<h4 id=\"잡종-구조\" style=\"position:relative;\"><a href=\"#%EC%9E%A1%EC%A2%85-%EA%B5%AC%EC%A1%B0\" aria-label=\"잡종 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>잡종 구조</h4>\n<p>절반은 객체, 절반은 자료 구조인 잡종 구조가 있다.<br>\n함수나 타입을 보호할지 공개할지 확신하지 못해 어중간하게 내놓은 설계에 불과하다.</p>\n<h4 id=\"구조체-감추기\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4-%EA%B0%90%EC%B6%94%EA%B8%B0\" aria-label=\"구조체 감추기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조체 감추기</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">ctxt<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePathOfScratchDirectoryOption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 1</span>\r\nctxt<span class=\"token punctuation\">.</span><span class=\"token function\">getScratchDirectoryOption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<p>1번은 객체에 공개해야 하는 매서드가 너무 많아진다.<br>\n2번은 객체가 아니라 자료 구조를 반환한다고 가정해도 별로다.</p>\n<p>ctxt가 객체라면 <code class=\"language-text\">뭔가를 하라고</code> 말해야지 속을 드러내라고 말하면 안된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> outFile <span class=\"token operator\">=</span> outputDir <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> className<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token char\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".class\"</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token class-name\">FileOutputStream</span> fout <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>outFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token class-name\">BufferedOutputstream</span> bos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedOutputStream</span><span class=\"token punctuation\">(</span>fout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>점, 슬래시, 파일확장자, File 객체를 부주의하게 마구 뒤섞으면 안된다.<br>\n그럼에도 코드를 보면, 임시 파일을 생성하기 위해 임시 디렉터리의 절대 경로를 얻으려고 하는 것을 알 수 있다.<br>\n그렇다면 ctxt 객체에 임시 파일을 생성하라고 한다면?</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">BufferedOutputStream</span> bos <span class=\"token operator\">=</span> ctxt<span class=\"token punctuation\">.</span><span class=\"token function\">createScratchFileStream</span><span class=\"token punctuation\">(</span>classFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>객체에 맡기기에 적당한 임무로 보인다.<br>\nctxt는 내부 구조를 드러내지 않으며, 모듈에서 해당 함수는 자신이 몰라야 하는 여러 객체를 탐색할 필요가 없다.<br>\n따라서 디미터 법칙을 위반하지 않는다.</p>\n<h3 id=\"자료-전달-객체\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%A3%8C-%EC%A0%84%EB%8B%AC-%EA%B0%9D%EC%B2%B4\" aria-label=\"자료 전달 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자료 전달 객체</h3>\n<p>자료 전달 객체는 <code class=\"language-text\">DTO(Data Transfer Object)</code>이다.<br>\n공개 변수만 있고 함수가 없는 클래스다.<br>\nDB에 저장된 가공되지 않은 정보를\r\n애플리케이션 코드에서 사용할 객체로 변환하는 일련의 단계에서<br>\n가장 처음으로 사용하는 구조체다.<br>\n좀 더 일반적인 형태는 <code class=\"language-text\">빈(Bean)</code>구조다.</p>\n<h4 id=\"활성-레코드\" style=\"position:relative;\"><a href=\"#%ED%99%9C%EC%84%B1-%EB%A0%88%EC%BD%94%EB%93%9C\" aria-label=\"활성 레코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>활성 레코드</h4>\n<p>활성 레코드는 DTO의 특수한 형태다.<br>\n공개 변수가 있거나 비공개 변수에 조회/설정 함수가 있는 자료 구조지만,<br>\n대개 save나 find와 같은 탐색 함수도 제공한다.</p>\n<p>활성 레코드에 비즈니스 규칙 메서드를 추가해, 이런 자료 구조를 객체로 취급하는 것은<br>\n바람직하지 않다.</p>\n<p>활성 레코드를 자료 구조로 취급하고,<br>\n비즈니스 규칙을 담으면서 내부 자료를 숨기는 객체는 따로 생성한다.<br>\n(여기서 내부 자료는 활성 레코드의 인스턴스일 가능성이 높다.)</p>\n<h3 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h3>\n<ul>\n<li><strong>객체</strong></li>\n</ul>\n<ol>\n<li>동작을 공개하고 자료를 숨긴다.</li>\n<li>기존 동작을 변경하지 않으면서 새 객체 타입을 추가하기는 쉽다.</li>\n<li>기존 객체에 새 동작을 추가하기는 어렵다.</li>\n</ol>\n<ul>\n<li><strong>자료 구조</strong></li>\n</ul>\n<ol>\n<li>별다른 동작 없이 자료를 노출한다.</li>\n<li>새 동작을 추가하기 쉽다.</li>\n<li>기존 함수에 새 자료 구조를 추가하기 어렵다.</li>\n</ol>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#intro\">Intro</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%9E%90%EB%A3%8C-%EC%B6%94%EC%83%81%ED%99%94\">자료 추상화</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9E%90%EB%A3%8C%EA%B0%9D%EC%B2%B4-%EB%B9%84%EB%8C%80%EC%B9%AD\">자료/객체 비대칭</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%94%94%EB%AF%B8%ED%84%B0-%EB%B2%95%EC%B9%99\">디미터 법칙</a></p>\n<ul>\n<li><a href=\"#%EA%B8%B0%EC%B0%A8-%EC%B6%A9%EB%8F%8C\">기차 충돌</a></li>\n<li><a href=\"#%EC%9E%A1%EC%A2%85-%EA%B5%AC%EC%A1%B0\">잡종 구조</a></li>\n<li><a href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4-%EA%B0%90%EC%B6%94%EA%B8%B0\">구조체 감추기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9E%90%EB%A3%8C-%EC%A0%84%EB%8B%AC-%EA%B0%9D%EC%B2%B4\">자료 전달 객체</a></p>\n<ul>\n<li><a href=\"#%ED%99%9C%EC%84%B1-%EB%A0%88%EC%BD%94%EB%93%9C\">활성 레코드</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 04, 2024","title":"6장 객체와 자료 구조","categories":"Clean_Code","author":"신승민","emoji":"🤖"},"fields":{"slug":"/[Clean Code] 6장 객체와 자료 구죠/"}},"prev":{"id":"198143c9-5deb-53cc-ae66-f201090f4562","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>이 장에서는 단위 테스트에 대해 다룬다.<br>\n과거엔 드라이버 코드를 급조해 결과물이 나오는 것을 팀원들에게 보여줘야 했다.<br>\n그리고 버렸다.<br>\n하지만 현재는 <strong>애자일</strong>과 <strong>TDD</strong> 덕택에 단위 테스트를 <strong>자동화</strong>하는 프로그래머들이 많아졌다.<br>\n그러던 중 많은 프로그래머들이 놓친 미묘한 사실을 알아가보자.</p>\n<h3 id=\"tdd-법칙-세-가지\" style=\"position:relative;\"><a href=\"#tdd-%EB%B2%95%EC%B9%99-%EC%84%B8-%EA%B0%80%EC%A7%80\" aria-label=\"tdd 법칙 세 가지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TDD 법칙 세 가지</h3>\n<ul>\n<li><strong>첫째 법칙</strong>: 실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않는다.</li>\n<li><strong>둘째 법칙</strong>: 컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다.</li>\n<li><strong>셋째 법칙</strong>: 현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다.</li>\n</ul>\n<p>위 세 가지 법칙을 따르면 개발과 테스트가 대략 30초 주기로 묶인다.<br>\n또한 매일 많은 양에 달하는 테스트 케이스가 나온다.<br>\n사실상 전부 테스트하는 테스트 케이스가 나온다.<br>\n하지만 실제 코드와 맞먹을 정도로 방대한 테스트 코드는 심각한 관리 문제를 유발하기도 한다.</p>\n<h3 id=\"깨끗한-테스트-코드-유지하기\" style=\"position:relative;\"><a href=\"#%EA%B9%A8%EB%81%97%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0\" aria-label=\"깨끗한 테스트 코드 유지하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>깨끗한 테스트 코드 유지하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"테스트 코드는 실제 코드 못지 않게 중요하다.\"</code></pre></div>\n<p>저자는 테스트 코드에 팀원들간 규칙을 깨도 좋다고 허용한 팀을 예시로 든다.<br>\n테스트 코드를 잘 짜는 것보다, 안 짜는 것보다 짜는 것이 좋다고 판단했을 것이다.<br>\n실제 코드가 변할 때 테스트 코드도 변한다.  <code class=\"language-text\">그런데</code>테스트 코드<code class=\"language-text\">가 지저분할 수록 </code>실제 코드를 변경하기 어렵다.<br>\n<code class=\"language-text\">테스트 코드</code>가 복잡할수록 <code class=\"language-text\">실제 코드</code>를 짜는 시간보다 시간이 더 걸린다.<br>\n<code class=\"language-text\">실제 코드</code>를 변경해 기존 <code class=\"language-text\">테스트 케이스</code>가 실패하기 시작하면,<br>\n지저분한 <code class=\"language-text\">테스트 코드</code>로 인해, 실패하는 <code class=\"language-text\">테스트 케이스</code>를 점점 통과시키기 어려워진다.</p>\n<p>테스트 슈트가 없으면 개발자는 검증하지 못한다.<br>\n결국 결함율이 높아진다.<br>\n의도하지 않은 결함이 많아지면, 변경을 주저한다.<br>\n변경하면 손해가 크다 생각해 더 이상 코드를 정리하지 않는다.<br>\n그러면서 코드가 망가지기 시작한다.<br>\n결국 <strong>테스트 슈트</strong>도 없고, <strong>얼기설기 뒤섞인 코드</strong>에, <strong>좌절한 고객</strong>과, 테스트에 쏟아 부은 노력이 허사였다는 <strong>실망감</strong>만 남는다.</p>\n<p>그러므로 테스트 코드를 실제 코드 못지 않게 깨끗하게 짜야한다.</p>\n<h4 id=\"테스트는-유연성-유지보수성-재사용성을-제공한다\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8A%94-%EC%9C%A0%EC%97%B0%EC%84%B1-%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98%EC%84%B1-%EC%9E%AC%EC%82%AC%EC%9A%A9%EC%84%B1%EC%9D%84-%EC%A0%9C%EA%B3%B5%ED%95%9C%EB%8B%A4\" aria-label=\"테스트는 유연성 유지보수성 재사용성을 제공한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트는 유연성, 유지보수성, 재사용성을 제공한다.</h4>\n<p>코드에 <strong>유연성</strong>, <strong>유지보수성</strong>, <strong>재사용성</strong>을 제공하는 버팀목이 바로 <code class=\"language-text\">단위 테스트</code>이다.<br>\n아무리 아키텍처가 유연하고, 설계를 잘 나눠도, 테스트 케이스가 없으면 개발자는 변경을 주저한다.<br>\n<strong>버그</strong>가 숨어들까 두렵기 때문이다.<br>\n하지만 테스트 케이스가 있다면 괜찮다.<br>\n테스트 케이스가 제공하는 것들로 인해 변경이 쉬워진다.</p>\n<p>따라서 테스트 코드가 지저분하면 코드를 <strong>변경하는 능력</strong>이 떨어지며<br>\n코드 <strong>구조를 개선하는 능력</strong>도 떨어진다.<br>\n테스트 코드가 지저분할수록 실제 코드도 지저분해진다.<br>\n테스트 코드를 잃어버리고 실제 코드도 망가진다.</p>\n<h3 id=\"깨끗한-테스트-코드\" style=\"position:relative;\"><a href=\"#%EA%B9%A8%EB%81%97%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C\" aria-label=\"깨끗한 테스트 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>깨끗한 테스트 코드</h3>\n<p>깨끗한 테스트 코드를 만드는 데 가장 중요한 것은 <code class=\"language-text\">가독성</code>이다.<br>\n<code class=\"language-text\">명료성</code>, <code class=\"language-text\">단순성</code>, <code class=\"language-text\">풍부한 표현력</code>이 필요하다.</p>\n<p>저자는 여기서 테스트 코드를 예시로 든다.<br>\n<code class=\"language-text\">addPage</code>와 <code class=\"language-text\">assertSubString</code>을 부르느라 중복이 되는 코드가 많은 코드를 말이다.<br>\n여기선 <code class=\"language-text\">BUILD-OPERATE-CHECK 패턴</code>이 적합하다.</p>\n<ul>\n<li><strong>BUILD</strong>: 테스트 자료를 만든다.</li>\n<li><strong>OPERATE</strong>: 테스트 자료를 조작한다.</li>\n<li><strong>CHECK</strong>: 조작한 결과가 올바른지 확인한다.</li>\n</ul>\n<blockquote>\n<p>GIVEN-WHEN-THEN 패턴과 비슷하다.</p>\n</blockquote>\n<h4 id=\"도메인에-특화된-테스트-언어dsl\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8%EC%97%90-%ED%8A%B9%ED%99%94%EB%90%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%96%B8%EC%96%B4dsl\" aria-label=\"도메인에 특화된 테스트 언어dsl permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도메인에 특화된 테스트 언어(DSL)</h4>\n<p>흔히 쓰는 시스템 조작 API를 사용하는 대신<br>\nAPI 위에다 함수와 유틸리티를 구현한 후 그 함수와 유틸리티를 사용하므로<br>\n테스트 코드를 짜기도 읽기도 쉬워진다.<br>\n이러한 코드는 코드를 계속 리팩터링하다가 진화된 API다.</p>\n<h4 id=\"이중-표준\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A4%91-%ED%91%9C%EC%A4%80\" aria-label=\"이중 표준 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이중 표준</h4>\n<p>저자는 온도가 ‘급격하게 떨어지면’ 경보, 온풍기, 송풍기가<br>\n모두 가동되는지 확인하는 코드를 예시로 든다.</p>\n<blockquote>\n<p>정말 신기한 사실은 저자가 말한대로 내가 코드를 읽었다는 것이고 그게 피곤했다는 것이다.</p>\n</blockquote>\n<p>저자는 코드를 함수로 감추고, 정보를 간결하게 표현함으로써 해결한다.<br>\n하지만 <code class=\"language-text\">그릇된 정보를 피하라</code>는 규칙의 위반이지만, 현 상황에는 적절하다.</p>\n<p>다른 예시로는 제한적인 환경에 대해 말한다.<br>\n임베디드 시스템에서 컴퓨터 자원과 메모리가 제한적일 가능성이 많다.<br>\n하지만 테스트 환경은 자원이 제한적일 가능성이 낮다.<br>\n즉, 실제 환경에서는 절대로 안 되지만 테스트 환경에서는 전혀 문제없는 방식이 있다.<br>\n대개 메모리나 CPU 효율과 관련 있는 경우다.<br>\n코드의 깨끗함과는 철저히 무관하다.</p>\n<h3 id=\"테스트당-assert-하나\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8B%B9-assert-%ED%95%98%EB%82%98\" aria-label=\"테스트당 assert 하나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트당 assert 하나</h3>\n<p>JUnit으로 테스트 코드를 짤 때는 함수마다 assert 문을 단 하나만 사용해야 한다고 주장하는 학파가 있다.<br>\n그래서 <code class=\"language-text\">GIVEN-WHEN-THEN</code> 이라는 관례를 많이 사용한다.<br>\n이로써 테스트 코드를 읽기 쉬워지지만, 테스트를 분리하면 중복되는 코드가 많아진다.<br>\n<code class=\"language-text\">TEMPLATE METHOD 패턴</code>을 사용하면 중복을 제거할 수 있다.<br>\ngiven/when 부분을 <strong>부모 클래스</strong>에 두고, then 부분을 <strong>자식 클래스</strong>에 두면 된다.<br>\n혹은 given/when 부분을 <strong>@Before 함수</strong>에 두고, then 부분을 <strong>@Test 함수</strong>에 둬도 된다.<br>\n하지만 배보다 배꼽이 더 크다.</p>\n<p>때로는 함수 하나에 assert 문을 여러 개 넣기도 하지만 assert 문 개수는 최대한 줄여야 좋겠다.</p>\n<h4 id=\"테스트당-개념-하나\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8B%B9-%EA%B0%9C%EB%85%90-%ED%95%98%EB%82%98\" aria-label=\"테스트당 개념 하나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트당 개념 하나</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"테스트 함수마다 한 개념만 테스트하라.\"</code></pre></div>\n<p>이 규칙이 더 낫겠다.</p>\n<p>저자는 여기서 독자적인 개념 세 개를 테스트하는 코드를 예시로 든다.<br>\n세 개념을 한 함수로 몰아넣으면,<br>\n각 절이 존재하는 이유와 각 절이 테스트하는 개념을 모두 이해해야 한다.<br>\n하지만 assert 문이 여럿이라는 사실이 문제가 아니다.</p>\n<p>따라서 한 테스트 함수에서 여러 개념을 테스트한다는 사실이 문제다.<br>\n그러므로 가장 좋은 규칙은 <code class=\"language-text\">개념 당 assert 문 수를 최소로 줄여라</code>와<br>\n<code class=\"language-text\">테스트 함수 하나는 개념 하나만 테스트 하라</code>라 하자.</p>\n<h3 id=\"first\" style=\"position:relative;\"><a href=\"#first\" aria-label=\"first permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>F.I.R.S.T.</h3>\n<p>깨끗한 테스트는 다음 다섯 가지 규칙을 따른다.</p>\n<ul>\n<li><strong>Fast(빠르게)</strong>: 자주 돌리지 않으면 초반에 문제를 찾아내 고치지 못한다. 코드를 마음껏 정리하지도 못한다. 결국 코드 품질이 망가지기 시작한다.</li>\n<li><strong>Independent(독립적으로)</strong>: 하나가 실패할 때 나머지도 잇달아 실패하므로 원인을 진단하기 어려워지며 후반 테스트가 찾아내야 할 결함이 숨겨진다.</li>\n<li><strong>Repeatable(반복가능하게)</strong>: 테스트가 돌아가지 않는 환경이 하나라도 있다면 테스트가 실패한 이유를 둘러댈 변명이 생긴다. 게다가 환경이 지원되지 않기에 테스트를 수행하지 못하는 상황에 직면한다.</li>\n<li><strong>Self-Validating(자가검증하는)</strong>: 테스트가 스스로 성공과 실패를 가늠하지 않는다면 판단은 주관적이 되며 지루한 수작업 평가가 필요하게 된다.</li>\n<li><strong>Timely(적시에)</strong>: 실제 코드가 테스트하기 어렵다는 사실을 발견할지 모른다. 어떤 실제 코드는 테스트하기 너무 어렵다고 판명날지 모른다. 테스트가 불가능하도록 실제 코드를 설계할지도 모른다.</li>\n</ul>\n<h3 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h3>\n<p>테스트 코드는 실제 코드의 <code class=\"language-text\">유연성</code>, <code class=\"language-text\">유지보수성</code>, <code class=\"language-text\">재사용성</code>을 보존하고 강화한다.<br>\n그러므로 테스트 코드는 지속적으로 깨끗하게 관리하자.<br>\n표현력을 높이고 간결하게 정리하자.<br>\n테스트 API를 구현해 <code class=\"language-text\">도메인 특화 언어(Domain Specific Language)</code>를 만들자.</p>\n<p>또한 모르던 개념을 알게 되었다.</p>\n<ul>\n<li><strong>웹 로봇(크롤러)</strong>: 사람과의 상호작용 없이 연속된 웹 트랜잭션들을 자동으로 수행하는 소프트웨어 프로그램이다. 콘텐츠를 가져오고, 하이퍼링크를 따라가고, 발견한 데이터를 처리한다.</li>\n<li><strong>BUILD-OPERATE-CHECK 패턴</strong>: given-when-then이랑 같은 의미</li>\n<li><strong>TEMPLATE METHOD 패턴</strong>: 여러 클래스에서 공통으로 사용하는 매서드를 템플릿화 하여 상위 클래스에서 정의하고, 하위 클래스마다 세부 동작 사항을 다르게 구현하는 패턴</li>\n</ul>\n<p>직접 테스트 코드를 짜본 것은 강의를 따라한 정도다.<br>\n내가 일하는 곳에서는 테스트 코드를 작성하지 않고, 바로 유저 테스트로 넘어간다.<br>\n여기서 나는 항상 결함에 대한 불안감이 있었다.<br>\n유지보수를 하면서도 항상 불안해 있다.<br>\n변경에 주저한다는 것과 코드를 다시 안 보게 된다는 말에 동감한다.<br>\n이번 글을 통해 깨끗한 테스트 코드의 중요성을 알게 되었고, 회사에 적용할 수 있는 방법을 강구해봐야겠다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#intro\">Intro</a></p>\n<ul>\n<li>\n<p><a href=\"#tdd-%EB%B2%95%EC%B9%99-%EC%84%B8-%EA%B0%80%EC%A7%80\">TDD 법칙 세 가지</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B9%A8%EB%81%97%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0\">깨끗한 테스트 코드 유지하기</a></p>\n<ul>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8A%94-%EC%9C%A0%EC%97%B0%EC%84%B1-%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98%EC%84%B1-%EC%9E%AC%EC%82%AC%EC%9A%A9%EC%84%B1%EC%9D%84-%EC%A0%9C%EA%B3%B5%ED%95%9C%EB%8B%A4\">테스트는 유연성, 유지보수성, 재사용성을 제공한다.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B9%A8%EB%81%97%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C\">깨끗한 테스트 코드</a></p>\n<ul>\n<li><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8%EC%97%90-%ED%8A%B9%ED%99%94%EB%90%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%96%B8%EC%96%B4dsl\">도메인에 특화된 테스트 언어(DSL)</a></li>\n<li><a href=\"#%EC%9D%B4%EC%A4%91-%ED%91%9C%EC%A4%80\">이중 표준</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8B%B9-assert-%ED%95%98%EB%82%98\">테스트당 assert 하나</a></p>\n<ul>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8B%B9-%EA%B0%9C%EB%85%90-%ED%95%98%EB%82%98\">테스트당 개념 하나</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#first\">F.I.R.S.T.</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 06, 2024","title":"9장 단위 테스트","categories":"Clean_Code","author":"신승민","emoji":"🐒"},"fields":{"slug":"/[Clean Code] 9장 단위 테스트/"}},"site":{"siteMetadata":{"siteUrl":"https://maljaaa.github.io","comments":{"utterances":{"repo":"maljaaa/maljaaa.github.io"}}}}},"pageContext":{"slug":"/[Clean Code] 7장 오류 처리/","nextSlug":"/[Clean Code] 6장 객체와 자료 구죠/","prevSlug":"/[Clean Code] 9장 단위 테스트/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}