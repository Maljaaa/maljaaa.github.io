{"componentChunkName":"component---src-templates-blog-template-js","path":"/[Clean Code] 8장 경계/","result":{"data":{"cur":{"id":"d7babba4-d387-5f2e-bbe3-4df00f35b075","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>우리가 시스템을 개발할 때 모두 직접 개발하지 않고, 패키지를 사던지 오픈소스를 이용한다.<br>\n또는 사내 다른 팀이 제공하는 컴포넌트를 사용한다.<br>\n이렇게 외부 환경과의 상호작용 방식을 정의하는 것이\r\n<code class=\"language-text\">시스템 경계(System Boundaries)</code>라고 생각한다.</p>\n<h3 id=\"외부-코드-사용하기\" style=\"position:relative;\"><a href=\"#%EC%99%B8%EB%B6%80-%EC%BD%94%EB%93%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"외부 코드 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>외부 코드 사용하기</h3>\n<p>인터페이스 제공자는 적용성을 최대한 넓히려 애쓴다.<br>\n인터페이스 사용자는 자신의 요구에 집중하는 인터페이스를 바란다.<br>\n여기서는 예시로 <code class=\"language-text\">java.util.Map</code>을 들고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span> sensors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token class-name\">Sensor</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Sensor</span><span class=\"token punctuation\">)</span>sensors<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>sensorId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Sensor라는 객체를 담는 Map을 생성하고,<br>\nSeonsor 객체가 필요한 코드는 Sensor 객체를 가져온다.<br>\n이 코드는 <strong>깨끗한 코드</strong>가 아니고, <strong>의도</strong>도 분명히 드러나지 않는다.\r\n<code class=\"language-text\">제네릭스(Generics)</code>를 사용하면 코드 가독성이 크게 높아진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Sensor</span><span class=\"token punctuation\">></span></span> sensors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Sensor</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n<span class=\"token class-name\">Sensor</span> s <span class=\"token operator\">=</span> sensors<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>sensorId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>하지만 이 방법도 ”<strong>Map&#x3C;String, Sensor>가 사용자에게 필요하지 않은 기능까지 제공한다.</strong>“는<br>\n문제를 해결하지 못한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sensors</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span> sensors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Sensor</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Sensor</span><span class=\"token punctuation\">)</span> sensors<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 하면 사용자는 제네릭스가 사용되었는지 여부를 신경 쓸 필요가 없다.<br>\nSensor 클래스 안에서 객체 유형을 관리하고 변환하기 때문이다.<br>\n이렇게 <code class=\"language-text\">캡슐화</code>를 통해 사용하는 것도 좋다.</p>\n<ul>\n<li>주의할 점\n<ul>\n<li>여기저기 넘기지 말자.</li>\n<li>클래스나 클래스 계열 밖으로 노출되지 않도록 주의하자.</li>\n<li>Map 인스턴스를 공개 API의 인수로 넘기거나 반환값으로 사용하지 말자.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"경계-살피고-익히기\" style=\"position:relative;\"><a href=\"#%EA%B2%BD%EA%B3%84-%EC%82%B4%ED%94%BC%EA%B3%A0-%EC%9D%B5%ED%9E%88%EA%B8%B0\" aria-label=\"경계 살피고 익히기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>경계 살피고 익히기</h3>\n<p>외부 코드를 익히기는 어렵다.<br>\n외부 코드를 통합하기도 어렵다.<br>\n두 가지를 동시에 하기는 두 배나 어렵다.<br>\n먼저 간단한 테스트 케이스를 작성해 외부 코드를 익한다면?<br>\n짐 뉴커크는 이를 <code class=\"language-text\">학습 테스트</code>라 부른다.</p>\n<p>학습 테스트는 프로그램에서 사용하려는 방식대로 외부 API를 호출한다.<br>\n학습 테스트는 <code class=\"language-text\">API</code>를 사용하려는 목적에 초점을 둔다.</p>\n<h3 id=\"log4j-익히기\" style=\"position:relative;\"><a href=\"#log4j-%EC%9D%B5%ED%9E%88%EA%B8%B0\" aria-label=\"log4j 익히기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>log4j 익히기</h3>\n<p>위 내용을 토대로 log4j를 익혀보자.</p>\n<h3 id=\"학습-테스트는-공짜-이상이다\" style=\"position:relative;\"><a href=\"#%ED%95%99%EC%8A%B5-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8A%94-%EA%B3%B5%EC%A7%9C-%EC%9D%B4%EC%83%81%EC%9D%B4%EB%8B%A4\" aria-label=\"학습 테스트는 공짜 이상이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>학습 테스트는 공짜 이상이다.</h3>\n<p>학습 테스트는 패키지가 예상대로 도는지 검증한다.<br>\n패키지 새 버전이 나올 때마다 새로운 위험이 생긴다.<br>\n새 버전이 우리 코드와 호환되지 않다면, 학습 테스트가 바로 알아낸다.<br>\n이런 경계 테스트가 있다면 패키지의 새 버전으로 이전하기 쉬워진다.<br>\n그렇지 않다면 낡은 버전을 필요 이상으로 오랫동안 사용하려는 유혹에 빠지기 쉽다.</p>\n<blockquote>\n<p>패키지가 한 두개가 아니고 우리 코드가 다양한데 테스트 케이스를 다 만들 수 있을까…?</p>\n</blockquote>\n<h3 id=\"아직-존재하지-않는-코드를-사용하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%A7%81-%EC%A1%B4%EC%9E%AC%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"아직 존재하지 않는 코드를 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아직 존재하지 않는 코드를 사용하기</h3>\n<p>때로는 우리 지식이 경계를 너머 미치지 못하는 코드 영역도 있다.<br>\n때로는 더 이상 내다보지 않기로 결정한다.<br>\n즉, 모르는 분야를 나중에 부딪히는 것이다.</p>\n<p>인터페이스를 정의하고, 클래스와 매서드를 추가한다.<br>\nController를 분리하여 코드를 깔끔하게 한다.<br>\n다른 팀이 구현을 하면 간극을 매우게 된다.<br>\nADAPTER 패턴으로 API 사용을 캡슐화해 API가 바뀔 때 수정할 코드를 한 곳으로 모은다.</p>\n<p>이와 같은 설계는 테스트도 편하다.</p>\n<blockquote>\n<p>저자의 자기 자랑 같이 들린 파트…</p>\n</blockquote>\n<h3 id=\"깨끗한-경계\" style=\"position:relative;\"><a href=\"#%EA%B9%A8%EB%81%97%ED%95%9C-%EA%B2%BD%EA%B3%84\" aria-label=\"깨끗한 경계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>깨끗한 경계</h3>\n<p>깨끗한 경계를 위하여!</p>\n<ol>\n<li>외부 패키지를 호출하는 코드를 가능한 줄여 경계를 관리하자.</li>\n<li>새로운 클래스로 <code class=\"language-text\">경계를 감싸</code>거나 <code class=\"language-text\">ADPAPTER 패턴</code>을 사용해</li>\n</ol>\n<p>우리가 원하는 인터페이스를 패키지가 제공하는 <code class=\"language-text\">인터페이스로 변환</code>하자.</p>\n<p>이렇게 좋아진다!</p>\n<ol>\n<li>코드 가독성이 높아진다.</li>\n<li>경계 인터페이스를 사용하는 일관성도 높아진다.</li>\n<li>외부 패키지가 변했을 때 변경할 코드도 줄어든다.</li>\n</ol>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#intro\">Intro</a></p>\n<ul>\n<li><a href=\"#%EC%99%B8%EB%B6%80-%EC%BD%94%EB%93%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">외부 코드 사용하기</a></li>\n<li><a href=\"#%EA%B2%BD%EA%B3%84-%EC%82%B4%ED%94%BC%EA%B3%A0-%EC%9D%B5%ED%9E%88%EA%B8%B0\">경계 살피고 익히기</a></li>\n<li><a href=\"#log4j-%EC%9D%B5%ED%9E%88%EA%B8%B0\">log4j 익히기</a></li>\n<li><a href=\"#%ED%95%99%EC%8A%B5-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8A%94-%EA%B3%B5%EC%A7%9C-%EC%9D%B4%EC%83%81%EC%9D%B4%EB%8B%A4\">학습 테스트는 공짜 이상이다.</a></li>\n<li><a href=\"#%EC%95%84%EC%A7%81-%EC%A1%B4%EC%9E%AC%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">아직 존재하지 않는 코드를 사용하기</a></li>\n<li><a href=\"#%EA%B9%A8%EB%81%97%ED%95%9C-%EA%B2%BD%EA%B3%84\">깨끗한 경계</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"Intro 우리가 시스템을 개발할 때 모두 직접 개발하지 않고, 패키지를 사던지 오픈소스를 이용한다. 또는 사내 다른 팀이 제공하는 컴포넌트를 사용한다. 이렇게 외부 환경과의 상호작용 방식을 정의하는 것이\r\n라고 생각한다. 외부 코드 사용하기 인터페이스 제공자는 적용성을 최대한 넓히려 애쓴다. 인터페이스 사용자는 자신의 요구에 집중하는 인터페이스를 바란다. 여기서는 예시로 을 들고 있다. Sensor라는 객체를 담는 Map을 생성하고, Seonsor 객체가 필요한 코드는 Sensor 객체를 가져온다. 이 코드는 깨끗한 코드가 아니고, 의도도 분명히 드러나지 않는다.\r\n를 사용하면 코드 가독성이 크게 높아진다. 하지만 이 방법도 ”Map<String, Sensor>가 사용자에게 필요하지 않은 기능까지 제공한다.“는 문제를 해결하지 못한다. 이렇게 하면 사용자는 제네릭스가 사용되었는지 여부를 신경 쓸 필요가 없다. Sensor 클래스 안에서 객체 유형을 관리하고 변환하기 때문이다. 이…","frontmatter":{"date":"September 06, 2024","title":"8장 경계","categories":"Clean_Code","author":"신승민","emoji":"🚌"},"fields":{"slug":"/[Clean Code] 8장 경계/"}},"next":{"id":"198143c9-5deb-53cc-ae66-f201090f4562","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>이 장에서는 단위 테스트에 대해 다룬다.<br>\n과거엔 드라이버 코드를 급조해 결과물이 나오는 것을 팀원들에게 보여줘야 했다.<br>\n그리고 버렸다.<br>\n하지만 현재는 <strong>애자일</strong>과 <strong>TDD</strong> 덕택에 단위 테스트를 <strong>자동화</strong>하는 프로그래머들이 많아졌다.<br>\n그러던 중 많은 프로그래머들이 놓친 미묘한 사실을 알아가보자.</p>\n<h3 id=\"tdd-법칙-세-가지\" style=\"position:relative;\"><a href=\"#tdd-%EB%B2%95%EC%B9%99-%EC%84%B8-%EA%B0%80%EC%A7%80\" aria-label=\"tdd 법칙 세 가지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TDD 법칙 세 가지</h3>\n<ul>\n<li><strong>첫째 법칙</strong>: 실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않는다.</li>\n<li><strong>둘째 법칙</strong>: 컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다.</li>\n<li><strong>셋째 법칙</strong>: 현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다.</li>\n</ul>\n<p>위 세 가지 법칙을 따르면 개발과 테스트가 대략 30초 주기로 묶인다.<br>\n또한 매일 많은 양에 달하는 테스트 케이스가 나온다.<br>\n사실상 전부 테스트하는 테스트 케이스가 나온다.<br>\n하지만 실제 코드와 맞먹을 정도로 방대한 테스트 코드는 심각한 관리 문제를 유발하기도 한다.</p>\n<h3 id=\"깨끗한-테스트-코드-유지하기\" style=\"position:relative;\"><a href=\"#%EA%B9%A8%EB%81%97%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0\" aria-label=\"깨끗한 테스트 코드 유지하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>깨끗한 테스트 코드 유지하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"테스트 코드는 실제 코드 못지 않게 중요하다.\"</code></pre></div>\n<p>저자는 테스트 코드에 팀원들간 규칙을 깨도 좋다고 허용한 팀을 예시로 든다.<br>\n테스트 코드를 잘 짜는 것보다, 안 짜는 것보다 짜는 것이 좋다고 판단했을 것이다.<br>\n실제 코드가 변할 때 테스트 코드도 변한다.  <code class=\"language-text\">그런데</code>테스트 코드<code class=\"language-text\">가 지저분할 수록 </code>실제 코드를 변경하기 어렵다.<br>\n<code class=\"language-text\">테스트 코드</code>가 복잡할수록 <code class=\"language-text\">실제 코드</code>를 짜는 시간보다 시간이 더 걸린다.<br>\n<code class=\"language-text\">실제 코드</code>를 변경해 기존 <code class=\"language-text\">테스트 케이스</code>가 실패하기 시작하면,<br>\n지저분한 <code class=\"language-text\">테스트 코드</code>로 인해, 실패하는 <code class=\"language-text\">테스트 케이스</code>를 점점 통과시키기 어려워진다.</p>\n<p>테스트 슈트가 없으면 개발자는 검증하지 못한다.<br>\n결국 결함율이 높아진다.<br>\n의도하지 않은 결함이 많아지면, 변경을 주저한다.<br>\n변경하면 손해가 크다 생각해 더 이상 코드를 정리하지 않는다.<br>\n그러면서 코드가 망가지기 시작한다.<br>\n결국 <strong>테스트 슈트</strong>도 없고, <strong>얼기설기 뒤섞인 코드</strong>에, <strong>좌절한 고객</strong>과, 테스트에 쏟아 부은 노력이 허사였다는 <strong>실망감</strong>만 남는다.</p>\n<p>그러므로 테스트 코드를 실제 코드 못지 않게 깨끗하게 짜야한다.</p>\n<h4 id=\"테스트는-유연성-유지보수성-재사용성을-제공한다\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8A%94-%EC%9C%A0%EC%97%B0%EC%84%B1-%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98%EC%84%B1-%EC%9E%AC%EC%82%AC%EC%9A%A9%EC%84%B1%EC%9D%84-%EC%A0%9C%EA%B3%B5%ED%95%9C%EB%8B%A4\" aria-label=\"테스트는 유연성 유지보수성 재사용성을 제공한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트는 유연성, 유지보수성, 재사용성을 제공한다.</h4>\n<p>코드에 <strong>유연성</strong>, <strong>유지보수성</strong>, <strong>재사용성</strong>을 제공하는 버팀목이 바로 <code class=\"language-text\">단위 테스트</code>이다.<br>\n아무리 아키텍처가 유연하고, 설계를 잘 나눠도, 테스트 케이스가 없으면 개발자는 변경을 주저한다.<br>\n<strong>버그</strong>가 숨어들까 두렵기 때문이다.<br>\n하지만 테스트 케이스가 있다면 괜찮다.<br>\n테스트 케이스가 제공하는 것들로 인해 변경이 쉬워진다.</p>\n<p>따라서 테스트 코드가 지저분하면 코드를 <strong>변경하는 능력</strong>이 떨어지며<br>\n코드 <strong>구조를 개선하는 능력</strong>도 떨어진다.<br>\n테스트 코드가 지저분할수록 실제 코드도 지저분해진다.<br>\n테스트 코드를 잃어버리고 실제 코드도 망가진다.</p>\n<h3 id=\"깨끗한-테스트-코드\" style=\"position:relative;\"><a href=\"#%EA%B9%A8%EB%81%97%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C\" aria-label=\"깨끗한 테스트 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>깨끗한 테스트 코드</h3>\n<p>깨끗한 테스트 코드를 만드는 데 가장 중요한 것은 <code class=\"language-text\">가독성</code>이다.<br>\n<code class=\"language-text\">명료성</code>, <code class=\"language-text\">단순성</code>, <code class=\"language-text\">풍부한 표현력</code>이 필요하다.</p>\n<p>저자는 여기서 테스트 코드를 예시로 든다.<br>\n<code class=\"language-text\">addPage</code>와 <code class=\"language-text\">assertSubString</code>을 부르느라 중복이 되는 코드가 많은 코드를 말이다.<br>\n여기선 <code class=\"language-text\">BUILD-OPERATE-CHECK 패턴</code>이 적합하다.</p>\n<ul>\n<li><strong>BUILD</strong>: 테스트 자료를 만든다.</li>\n<li><strong>OPERATE</strong>: 테스트 자료를 조작한다.</li>\n<li><strong>CHECK</strong>: 조작한 결과가 올바른지 확인한다.</li>\n</ul>\n<blockquote>\n<p>GIVEN-WHEN-THEN 패턴과 비슷하다.</p>\n</blockquote>\n<h4 id=\"도메인에-특화된-테스트-언어dsl\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8%EC%97%90-%ED%8A%B9%ED%99%94%EB%90%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%96%B8%EC%96%B4dsl\" aria-label=\"도메인에 특화된 테스트 언어dsl permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도메인에 특화된 테스트 언어(DSL)</h4>\n<p>흔히 쓰는 시스템 조작 API를 사용하는 대신<br>\nAPI 위에다 함수와 유틸리티를 구현한 후 그 함수와 유틸리티를 사용하므로<br>\n테스트 코드를 짜기도 읽기도 쉬워진다.<br>\n이러한 코드는 코드를 계속 리팩터링하다가 진화된 API다.</p>\n<h4 id=\"이중-표준\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A4%91-%ED%91%9C%EC%A4%80\" aria-label=\"이중 표준 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이중 표준</h4>\n<p>저자는 온도가 ‘급격하게 떨어지면’ 경보, 온풍기, 송풍기가<br>\n모두 가동되는지 확인하는 코드를 예시로 든다.</p>\n<blockquote>\n<p>정말 신기한 사실은 저자가 말한대로 내가 코드를 읽었다는 것이고 그게 피곤했다는 것이다.</p>\n</blockquote>\n<p>저자는 코드를 함수로 감추고, 정보를 간결하게 표현함으로써 해결한다.<br>\n하지만 <code class=\"language-text\">그릇된 정보를 피하라</code>는 규칙의 위반이지만, 현 상황에는 적절하다.</p>\n<p>다른 예시로는 제한적인 환경에 대해 말한다.<br>\n임베디드 시스템에서 컴퓨터 자원과 메모리가 제한적일 가능성이 많다.<br>\n하지만 테스트 환경은 자원이 제한적일 가능성이 낮다.<br>\n즉, 실제 환경에서는 절대로 안 되지만 테스트 환경에서는 전혀 문제없는 방식이 있다.<br>\n대개 메모리나 CPU 효율과 관련 있는 경우다.<br>\n코드의 깨끗함과는 철저히 무관하다.</p>\n<h3 id=\"테스트당-assert-하나\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8B%B9-assert-%ED%95%98%EB%82%98\" aria-label=\"테스트당 assert 하나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트당 assert 하나</h3>\n<p>JUnit으로 테스트 코드를 짤 때는 함수마다 assert 문을 단 하나만 사용해야 한다고 주장하는 학파가 있다.<br>\n그래서 <code class=\"language-text\">GIVEN-WHEN-THEN</code> 이라는 관례를 많이 사용한다.<br>\n이로써 테스트 코드를 읽기 쉬워지지만, 테스트를 분리하면 중복되는 코드가 많아진다.<br>\n<code class=\"language-text\">TEMPLATE METHOD 패턴</code>을 사용하면 중복을 제거할 수 있다.<br>\ngiven/when 부분을 <strong>부모 클래스</strong>에 두고, then 부분을 <strong>자식 클래스</strong>에 두면 된다.<br>\n혹은 given/when 부분을 <strong>@Before 함수</strong>에 두고, then 부분을 <strong>@Test 함수</strong>에 둬도 된다.<br>\n하지만 배보다 배꼽이 더 크다.</p>\n<p>때로는 함수 하나에 assert 문을 여러 개 넣기도 하지만 assert 문 개수는 최대한 줄여야 좋겠다.</p>\n<h4 id=\"테스트당-개념-하나\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8B%B9-%EA%B0%9C%EB%85%90-%ED%95%98%EB%82%98\" aria-label=\"테스트당 개념 하나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트당 개념 하나</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"테스트 함수마다 한 개념만 테스트하라.\"</code></pre></div>\n<p>이 규칙이 더 낫겠다.</p>\n<p>저자는 여기서 독자적인 개념 세 개를 테스트하는 코드를 예시로 든다.<br>\n세 개념을 한 함수로 몰아넣으면,<br>\n각 절이 존재하는 이유와 각 절이 테스트하는 개념을 모두 이해해야 한다.<br>\n하지만 assert 문이 여럿이라는 사실이 문제가 아니다.</p>\n<p>따라서 한 테스트 함수에서 여러 개념을 테스트한다는 사실이 문제다.<br>\n그러므로 가장 좋은 규칙은 <code class=\"language-text\">개념 당 assert 문 수를 최소로 줄여라</code>와<br>\n<code class=\"language-text\">테스트 함수 하나는 개념 하나만 테스트 하라</code>라 하자.</p>\n<h3 id=\"first\" style=\"position:relative;\"><a href=\"#first\" aria-label=\"first permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>F.I.R.S.T.</h3>\n<p>깨끗한 테스트는 다음 다섯 가지 규칙을 따른다.</p>\n<ul>\n<li><strong>Fast(빠르게)</strong>: 자주 돌리지 않으면 초반에 문제를 찾아내 고치지 못한다. 코드를 마음껏 정리하지도 못한다. 결국 코드 품질이 망가지기 시작한다.</li>\n<li><strong>Independent(독립적으로)</strong>: 하나가 실패할 때 나머지도 잇달아 실패하므로 원인을 진단하기 어려워지며 후반 테스트가 찾아내야 할 결함이 숨겨진다.</li>\n<li><strong>Repeatable(반복가능하게)</strong>: 테스트가 돌아가지 않는 환경이 하나라도 있다면 테스트가 실패한 이유를 둘러댈 변명이 생긴다. 게다가 환경이 지원되지 않기에 테스트를 수행하지 못하는 상황에 직면한다.</li>\n<li><strong>Self-Validating(자가검증하는)</strong>: 테스트가 스스로 성공과 실패를 가늠하지 않는다면 판단은 주관적이 되며 지루한 수작업 평가가 필요하게 된다.</li>\n<li><strong>Timely(적시에)</strong>: 실제 코드가 테스트하기 어렵다는 사실을 발견할지 모른다. 어떤 실제 코드는 테스트하기 너무 어렵다고 판명날지 모른다. 테스트가 불가능하도록 실제 코드를 설계할지도 모른다.</li>\n</ul>\n<h3 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h3>\n<p>테스트 코드는 실제 코드의 <code class=\"language-text\">유연성</code>, <code class=\"language-text\">유지보수성</code>, <code class=\"language-text\">재사용성</code>을 보존하고 강화한다.<br>\n그러므로 테스트 코드는 지속적으로 깨끗하게 관리하자.<br>\n표현력을 높이고 간결하게 정리하자.<br>\n테스트 API를 구현해 <code class=\"language-text\">도메인 특화 언어(Domain Specific Language)</code>를 만들자.</p>\n<p>또한 모르던 개념을 알게 되었다.</p>\n<ul>\n<li><strong>웹 로봇(크롤러)</strong>: 사람과의 상호작용 없이 연속된 웹 트랜잭션들을 자동으로 수행하는 소프트웨어 프로그램이다. 콘텐츠를 가져오고, 하이퍼링크를 따라가고, 발견한 데이터를 처리한다.</li>\n<li><strong>BUILD-OPERATE-CHECK 패턴</strong>: given-when-then이랑 같은 의미</li>\n<li><strong>TEMPLATE METHOD 패턴</strong>: 여러 클래스에서 공통으로 사용하는 매서드를 템플릿화 하여 상위 클래스에서 정의하고, 하위 클래스마다 세부 동작 사항을 다르게 구현하는 패턴</li>\n</ul>\n<p>직접 테스트 코드를 짜본 것은 강의를 따라한 정도다.<br>\n내가 일하는 곳에서는 테스트 코드를 작성하지 않고, 바로 유저 테스트로 넘어간다.<br>\n여기서 나는 항상 결함에 대한 불안감이 있었다.<br>\n유지보수를 하면서도 항상 불안해 있다.<br>\n변경에 주저한다는 것과 코드를 다시 안 보게 된다는 말에 동감한다.<br>\n이번 글을 통해 깨끗한 테스트 코드의 중요성을 알게 되었고, 회사에 적용할 수 있는 방법을 강구해봐야겠다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#intro\">Intro</a></p>\n<ul>\n<li>\n<p><a href=\"#tdd-%EB%B2%95%EC%B9%99-%EC%84%B8-%EA%B0%80%EC%A7%80\">TDD 법칙 세 가지</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B9%A8%EB%81%97%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0\">깨끗한 테스트 코드 유지하기</a></p>\n<ul>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8A%94-%EC%9C%A0%EC%97%B0%EC%84%B1-%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98%EC%84%B1-%EC%9E%AC%EC%82%AC%EC%9A%A9%EC%84%B1%EC%9D%84-%EC%A0%9C%EA%B3%B5%ED%95%9C%EB%8B%A4\">테스트는 유연성, 유지보수성, 재사용성을 제공한다.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B9%A8%EB%81%97%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C\">깨끗한 테스트 코드</a></p>\n<ul>\n<li><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8%EC%97%90-%ED%8A%B9%ED%99%94%EB%90%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%96%B8%EC%96%B4dsl\">도메인에 특화된 테스트 언어(DSL)</a></li>\n<li><a href=\"#%EC%9D%B4%EC%A4%91-%ED%91%9C%EC%A4%80\">이중 표준</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8B%B9-assert-%ED%95%98%EB%82%98\">테스트당 assert 하나</a></p>\n<ul>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8B%B9-%EA%B0%9C%EB%85%90-%ED%95%98%EB%82%98\">테스트당 개념 하나</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#first\">F.I.R.S.T.</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 06, 2024","title":"9장 단위 테스트","categories":"Clean_Code","author":"신승민","emoji":"🐒"},"fields":{"slug":"/[Clean Code] 9장 단위 테스트/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://maljaaa.github.io","comments":{"utterances":{"repo":"maljaaa/maljaaa.github.io"}}}}},"pageContext":{"slug":"/[Clean Code] 8장 경계/","nextSlug":"/[Clean Code] 9장 단위 테스트/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}