{"componentChunkName":"component---src-templates-blog-template-js","path":"/Database의 책임/","result":{"data":{"cur":{"id":"4a66465d-215e-582d-9a35-35ccf9a4140d","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>스마트해썹 공정 프로그램을 개발하다가 보고서 조회 속도가 너무 느리다는 걸 발견했다.\r\n조회 조건을 <code class=\"language-text\">select</code> 해와서 그런가 싶었지만, 단순히 조회하려는 내용 자체를 가져오는데 오래 걸렸다.\r\n<code class=\"language-text\">EXPLAIN ANAYLZE</code>로 분석한 결과 다음과 같았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">Sort  <span class=\"token punctuation\">(</span>cost<span class=\"token operator\">=</span><span class=\"token number\">824979.95</span><span class=\"token punctuation\">.</span><span class=\"token number\">.824985</span><span class=\"token number\">.01</span> <span class=\"token keyword\">rows</span><span class=\"token operator\">=</span><span class=\"token number\">2024</span> width<span class=\"token operator\">=</span><span class=\"token number\">638</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>actual <span class=\"token keyword\">time</span><span class=\"token operator\">=</span><span class=\"token number\">2024.948</span><span class=\"token punctuation\">.</span><span class=\"token number\">.2024</span><span class=\"token number\">.954</span> <span class=\"token keyword\">rows</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> loops<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n\r\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n\r\nPlanning <span class=\"token keyword\">Time</span>: <span class=\"token number\">0.765</span> ms\r\nExecution <span class=\"token keyword\">Time</span>: <span class=\"token number\">2034.187</span> ms</code></pre></div>\n<blockquote>\n<p>쿼리 부분이 포함되어 있어서 중간은 생략했다.</p>\n</blockquote>\n<p>여기서 가장 중요하게 봐야할 부분은 <code class=\"language-text\">Execution Time: 2034.187 ms</code>이다.\r\n이렇게 때문에 조회 속도가 나오지 않았던 것이다.</p>\n<p>그래서 나는 서브쿼리를 조인으로 풀어가고, 필요없는 컬럼은 조회하지 않았다.\r\n또한 이미 걸려있는 인덱스를 적절히 활용했다.\r\n내가 쿼리를 수정하고 난 다음 성능을 분석한 결과는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">Sort  <span class=\"token punctuation\">(</span>cost<span class=\"token operator\">=</span><span class=\"token number\">72696.13</span><span class=\"token punctuation\">.</span><span class=\"token number\">.72705</span><span class=\"token number\">.22</span> <span class=\"token keyword\">rows</span><span class=\"token operator\">=</span><span class=\"token number\">3636</span> width<span class=\"token operator\">=</span><span class=\"token number\">316</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>actual <span class=\"token keyword\">time</span><span class=\"token operator\">=</span><span class=\"token number\">118.811</span><span class=\"token punctuation\">.</span><span class=\"token number\">.119</span><span class=\"token number\">.340</span> <span class=\"token keyword\">rows</span><span class=\"token operator\">=</span><span class=\"token number\">13</span> loops<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n  \r\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n\r\nPlanning <span class=\"token keyword\">Time</span>: <span class=\"token number\">0.286</span> ms\r\nExecution <span class=\"token keyword\">Time</span>: <span class=\"token number\">119.416</span> ms</code></pre></div>\n<p><code class=\"language-text\">Execution Time</code> 부분을 보면 어떤가?\r\n119.416 ms 정도 소요됐다.\r\n단순히 나누기 연산을 해봐도 17배 정도 빨라진 셈이다.\r\n여러번 성능 테스트를 해본 결과 약 20배 정도 빨라졌다는 것을 알 수 있었다.</p>\n<p>그러면서 의심이 들었다… 내가 잘 짰나..?\r\nSQL을 보니 연산 작업으로 인해 코드가 길고 복잡했다.\r\n이렇게 가져가면 너무나 유지보수가 힘들고, 확정성이 보장되지 않을 것 같았다.</p>\n<h3 id=\"database의-책임\" style=\"position:relative;\"><a href=\"#database%EC%9D%98-%EC%B1%85%EC%9E%84\" aria-label=\"database의 책임 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DATABASE의 책임</h3>\n<p>그럼 DB에서는 최소한 어디까지 하고, 최대로는 어디까지 해야할까?\r\n정말 필요한 값을 최소한으로만 주고, 비즈니스 로직은 Controller? Service? Repository? DTO? Client? 도대체 어디서 처리해야 할까?\r\n아니면, CONCAT(), IF()와 같은 기능을 통해 데이터를 가공해서 보내주는 경우가 좋을까?\r\n한번에 데이터를 가공해서 보내주면 Client측에서 레코드 하나씩 선회하며 가공해야 하는 부담감을 덜 수 있다.\r\n판단하기 앞서서, 3계층 구조(Three-Tier Architecture)에 대해서 알아보자.</p>\n<h3 id=\"3계층-구조three-tier-architecture\" style=\"position:relative;\"><a href=\"#3%EA%B3%84%EC%B8%B5-%EA%B5%AC%EC%A1%B0three-tier-architecture\" aria-label=\"3계층 구조three tier architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3계층 구조(Three-Tier Architecture)</h3>\n<p><img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&#x26;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbgODd7%2Fbtq7KmO52dz%2FRYOIlg9BSCyXKrOrxhy12K%2Fimg.png\" alt=\"\">\r\n3계층 구조란, 어떠한 플랫폼을 3계층으로 나누어서 별도의 논/물리적 장치에 구축 및 운영하는 설계 구조를 말한다.</p>\n<ul>\n<li><strong>프레젠테이션 계층(Presentation Tier)</strong></li>\n</ul>\n<p>사용자가 마주하는 계층으로, <code class=\"language-text\">Front-End</code> 라고도 부른다.\r\n사용자 인터페이스와 관계없는 데이터를 처리하는 로직은 포함되지 않는다.\r\n주로 웹 서버를 예시로 들 수 있고, HTML / CSS / JavaScript 등이 이 계층에 해당된다.</p>\n<p>가공을 여기서 하면 여러 Client에서 각각의 요구사항에 맞게 데이터를 가공할 수 있다.\r\n하지만 Layered Architecture를 사용하는 이유가 사라진다.\r\n추가적으로 하드웨어 성능이 발전함에 따라 Client에서 데이터 가공을 위임하는 것도 트렌드이다.</p>\n<ul>\n<li><strong>어플리케이션 계층(Application Tier)</strong></li>\n</ul>\n<p>동적인 데이터를 제공한다.\r\n비즈니스 로직 계층 또는 트랜잭션 계층 이라고도 한다.\r\n<code class=\"language-text\">Middleware</code> 또는 <code class=\"language-text\">Back-End</code>라고도 불린다.\r\n주로 PHP / Java 등이 이 계층에 해당된다.</p>\n<p>여기에 비즈니스 로직을 적용하지 않으면 다음과 같은 문제가 생긴다.</p>\n<ol>\n<li>디버깅할 수 없다.</li>\n<li>SQL문이 복잡해진다.</li>\n<li>분할, 결합 등 확장이 어렵다.</li>\n<li>문제가 발생했을 때 오류 추적이 어렵다.</li>\n</ol>\n<p>즉, 무결성이나 일관성에 관련된 책임만이 DB에 존재해야한다.\r\n거기서 데이터를 필터링하고, 그룹핑해서 내려주는 것으로 충분하다.</p>\n<ul>\n<li><strong>데이터 계층(Data Tier)</strong></li>\n</ul>\n<p>DBMS가 이 계층에 해당된다.\r\n<code class=\"language-text\">Back-End</code>라고도 부른다.\r\n주로 MySQL / MongoDB / PostgreSQL 등이 이 계층에 해당된다.</p>\n<h3 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h3>\n<p>Architecture에 따라서 DB에 로직을 태우고 데이터를 가공해도 괜찮다고 한다.\r\n하지만 오늘날 Layered Architecture를 사용하는 현재의 Structure에는 적합하지 않다.</p>\n<p>그러므로, DB는 데이터를 Filtering, Grouping, Sorting해서 내려주고,\r\nApp Layer에서 로직을 계산하고,\r\nPresentation Layer에서 데이터를 가공해서 표시하게끔 책임을 분리하는 것이 설계와 유지보수 관점에서 바람직하다.</p>\n<p>그래서 나는 Filtering, Grouping, Sorting 정도만 해서 데이터를 내려줬고,\r\n성능 분석 결과는 별 차이 없이 비슷했다.\r\n오히려 SQL문을 보기에 더 수월해졌다.\r\n프로젝트 구조 상 Client에 계산 로직을 위임함으로써 요구사항 변경에 유연해졌고, 확장성이 좋아졌다.\r\n다른 프로젝트였다면, Service에서 비즈니스 로직을 담았을 것 같다.</p>\n<h4 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h4>\n<p><a href=\"https://jaehoney.tistory.com/183\">Database의 책임 - DB는 어디까지 해줘야 하는가? (+ 데이터 가공,…</a>\r\n<a href=\"https://jaws-coding.tistory.com/9\">3계층 구조(3 Tier- Architecture) 이해하기 [스마트인재개발원]</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#intro\">Intro</a></p>\n<ul>\n<li>\n<p><a href=\"#database%EC%9D%98-%EC%B1%85%EC%9E%84\">DATABASE의 책임</a></p>\n</li>\n<li>\n<p><a href=\"#3%EA%B3%84%EC%B8%B5-%EA%B5%AC%EC%A1%B0three-tier-architecture\">3계층 구조(Three-Tier Architecture)</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"Intro 스마트해썹 공정 프로그램을 개발하다가 보고서 조회 속도가 너무 느리다는 걸 발견했다.\r\n조회 조건을  해와서 그런가 싶었지만, 단순히 조회하려는 내용 자체를 가져오는데 오래 걸렸다.\r\n로 분석한 결과 다음과 같았다. 쿼리 부분이 포함되어 있어서 중간은 생략했다. 여기서 가장 중요하게 봐야할 부분은 이다.\r\n이렇게 때문에 조회 속도가 나오지 않았던 것이다. 그래서 나는 서브쿼리를 조인으로 풀어가고, 필요없는 컬럼은 조회하지 않았다.\r\n또한 이미 걸려있는 인덱스를 적절히 활용했다.\r\n내가 쿼리를 수정하고 난 다음 성능을 분석한 결과는 다음과 같다.  부분을 보면 어떤가?\r\n119.416 ms 정도 소요됐다.\r\n단순히 나누기 연산을 해봐도 17배 정도 빨라진 셈이다.\r\n여러번 성능 테스트를 해본 결과 약 20배 정도 빨라졌다는 것을 알 수 있었다. 그러면서 의심이 들었다… 내가 잘 짰나..?\r\nSQL을 보니 연산 작업으로 인해 코드가 길고 복잡했다.\r\n이렇게 가져가면 너무나 …","frontmatter":{"date":"July 01, 2024","title":"Database의 책임","categories":"DB","author":"신승민","emoji":"☕"},"fields":{"slug":"/Database의 책임/"}},"next":{"id":"adcb28db-f486-5b76-8cc6-bf422692eaf7","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>코드를 보다가 <strong>Redirect Strategy</strong> 부분의 코드를 보게 되었다. 평소에 알던 리다이렉트는 그저 서버가 어떤 URL로 강제로 View를 보여주는 것이라고만 생각해왔다. 하지만 이번 공부를 통해 조금 다른 부분까지 알게 되어서 정리해보고자 한다.</p>\n<h3 id=\"멱등성\" style=\"position:relative;\"><a href=\"#%EB%A9%B1%EB%93%B1%EC%84%B1\" aria-label=\"멱등성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>멱등성</h3>\n<p><strong>PRG패턴</strong>을 이야기하는데 있어서 가장 먼저 이야기해야하는 것은 멱등성이다. 멱등성이란, <strong>연산을 여러번 적용하더라도 결과가 달라지지 않는 성질</strong>을 의미한다.<br>\n그렇다면 웹에서는 <code class=\"language-text\">GET</code>, <code class=\"language-text\">HEAD</code>, <code class=\"language-text\">PUT</code>, <code class=\"language-text\">DELETE</code>는 멱등성을 가진다라고 말할 수 있다.<br>\n하지만 <code class=\"language-text\">POST</code>는 멱등성을 가지지 않는다.</p>\n<p>예를 들어보면, <code class=\"language-text\">GET</code>은 얼마든지 자주 호출해도 같은 결과를 나타내지만, 게시글을 등록하는 <code class=\"language-text\">POST</code>를 연달아 호출하면 호출한 횟수만큼 게시글이 등록된다.</p>\n<p>하지만 REDIRECT가 아니라 FORWARD로 처리할 경우 새로고침 시 게시글 작성/주문이 중복해서 처리될 수 있다.</p>\n<h3 id=\"prg-패턴\" style=\"position:relative;\"><a href=\"#prg-%ED%8C%A8%ED%84%B4\" aria-label=\"prg 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PRG 패턴</h3>\n<p>위와 같은 이유로 PSG 패턴은 꼭 필요하다. 그렇다면 더 자세히 알아보자.</p>\n<p><code class=\"language-text\">PSG 패턴</code>은 웹 개발 시 권장되는 디자인 패턴으로<br>\n멱등성을 보장하고 POST에 대한 결과를 다른 사용자가 공유하기 위해 사용되는 패턴이다. <code class=\"language-text\">POST -> REDIRECT -> GET</code>을 줄여서 <code class=\"language-text\">PRG</code>라고 한다.</p>\n<p><code class=\"language-text\">POST</code> 요청이 오면 해당 요청을 수행 후 <code class=\"language-text\">REDIRECT</code>를 시켜서 <code class=\"language-text\">GET</code> 요청으로 변환시키는 행위를 의미한다.</p>\n<h3 id=\"포워딩-vs-리다이렉트\" style=\"position:relative;\"><a href=\"#%ED%8F%AC%EC%9B%8C%EB%94%A9-vs-%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%ED%8A%B8\" aria-label=\"포워딩 vs 리다이렉트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>포워딩 vs 리다이렉트</h3>\n<ol>\n<li>\n<p><strong>포워딩</strong> : 서버 내부에서 일어나는 일<br>\n1️⃣ 웹 브라우저 URL 창에 /event을 입력하고 엔터</p>\n<p>2️⃣ 서버가 /event URL을 전달 받음</p>\n<p>3️⃣ 서버가 서버 내부에서 /event -> /new-event로 포워딩</p>\n<p>4️⃣ /new-event 결과를 내부에서 렌더링</p>\n<p>5️⃣ 클라이언트에게 렌더링 된 결과를 반환</p>\n<p>6️⃣ 웹 브라우저에 응답 결과가 보이고 URL 창은 처음 입력한 /event로 유지됨</p>\n</li>\n<li>\n<p><strong>리다이렉트</strong> : 웹 브라우저가 인식하고 URL 경로를 실제 변경<br>\n1️⃣ 웹 브라우저 URL 창에 /event을 입력하고 엔터</p>\n<p>2️⃣ 서버가 /event URL을 전달 받음</p>\n<p>3️⃣ 서버가 /event -> /new-event로 리다이렉트</p>\n<p>4️⃣ 서버는 /new-event로 리다이렉트 하라는 결과를 웹 브라우저에 반환</p>\n<p>5️⃣ 웹 브라우저는 URL 창에 자동으로 /new-event를 입력하고 엔터(자동으로 일어나고, 실제 URL 창에 입력 결과가 /new-event로 변경됨)</p>\n<p>6️⃣ 서버가 /new-event URL을 전달 받음</p>\n<p>7️⃣ /new-event 결과를 내부에서 렌더링</p>\n<p>8️⃣ 클라이언트에게 렌더링 된 결과를 반환</p>\n<p>9️⃣ 웹 브라우저에 응답 결과가 보이고 URL 창은 리다이렉트 된 /new-event로 유지됨</p>\n</li>\n</ol>\n<h3 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h3>\n<p>지금까지 <strong>REDIRECT</strong>는 화면을 서버에서 정해주는 것이라고만 생각했다. 하지만 지금 공부를 하고나서는 달라졌다. <strong>REDIRECT</strong>는 멱등하지 않은 POST가 반복해서 요청하는 것을 방지하기 위해 사용한다. 그리고 클라이언트의 요청을 <strong>REDIRECT</strong>로 <strong>다른 URL</strong>을 보냄으로써 다시금 그 <strong>URL</strong> 요청을 받는다. 그 요청을 응답으로 내주면 된다.</p>\n<p><a href=\"https://www.inflearn.com/questions/89530/redirect%EC%9D%B4%EC%9C%A0%EA%B0%80-%EA%B6%81%EA%B8%88%ED%95%A9%EB%8B%88%EB%8B%A4\">인프런 질문</a><br>\n<a href=\"https://gofo-coding.tistory.com/entry/PRG-%ED%8C%A8%ED%84%B4-Post-%E2%86%92-Redirect-%E2%86%92-Get\">PRG 패턴 : Post → Redirect → Get</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#intro\">Intro</a></p>\n<ul>\n<li><a href=\"#%EB%A9%B1%EB%93%B1%EC%84%B1\">멱등성</a></li>\n<li><a href=\"#prg-%ED%8C%A8%ED%84%B4\">PRG 패턴</a></li>\n<li><a href=\"#%ED%8F%AC%EC%9B%8C%EB%94%A9-vs-%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%ED%8A%B8\">포워딩 vs 리다이렉트</a></li>\n<li><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 04, 2024","title":"PRG(Post-Redirect-Get)","categories":"Spring_MVC","author":"신승민","emoji":"😴"},"fields":{"slug":"/PRG/"}},"prev":{"id":"e7746db5-6421-5dfc-8523-7dfbeddaf021","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>회사에서 유지보수를 하다가 끔찍한 프로젝트를 보게 되었다. 변수명과 클래스 명은 모두 1,2,3 혹은 A, B, C로 구분되어 있었다. 이런 이유 때문에 유지보수 하는 일이 너무 힘들었다. 그래서 어떻게 하면 나는 이런 코드를 짜지 않을 수 있을까? 어떻게 하면 이 코드를 좋은 코드로 바꿀 수 있을까?라는 의문점이 생겼다. 그래서 미루고 미뤄왔던 클린코드를 읽어보려고 한다.</p>\n<h3 id=\"코드가-존재하리라\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EA%B0%80-%EC%A1%B4%EC%9E%AC%ED%95%98%EB%A6%AC%EB%9D%BC\" aria-label=\"코드가 존재하리라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드가 존재하리라</h3>\n<p>요즘 기술이 발전함에 따라 코드를 자동으로 생성해주는 기술들이 생겨나기 시작했다. 그럼에도 저자는 코드가 사라질 가망이 없다고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"궁긍적으로 코드는 요구사항을 표현하는 언어라는 사실을 명심한다. \r\n요구사항에 더욱 가까운 언어를 만들 수도 있고, 요구사항에서 정형 구조를 뽑아내는 도구를 만들 수도 있다. \r\n하지만 어느 순간에는 정밀한 표현이 필요하다.\r\n그 필요성을 없앨 방법은 없다.\r\n\r\n그러므로 코드도 항상 존재하리라.\"</code></pre></div>\n<h3 id=\"나쁜-코드\" style=\"position:relative;\"><a href=\"#%EB%82%98%EC%81%9C-%EC%BD%94%EB%93%9C\" aria-label=\"나쁜 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>나쁜 코드</h3>\n<p>80년대 후반 킬러 앱 하나를 구현한 회사를 이야기하면서 시작한다.<br>\n회사가 망했는데, 그 원인은 바로 나쁜 코드 탓이었다.<br>\n나쁜 코드에 발목이 잡혀 고생하는 것을 고행(Wading)이라 부른다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">우리 모두는 자신이 짠 쓰레기 코드를 쳐다보며 나중에 손보겠다고 생각한 경험이 있다. \r\n우리 모두는 대충 짠 프로그램이 돌아간다는 사실에 안도감을 느끼며 그래도 안 돌아가는 프로그램보다 돌아가는 쓰레기가 좋다고 스스로를 위로한 경험이 있다. \r\n다시 돌아와 나중에 정리하겠다고 다짐했었따.\r\n물론 그때 그 시절 우리는 르블랑의 법칙(Leblanc's Law)을 몰랐다.\r\n\r\n나중은 결코 오지 않는다.</code></pre></div>\n<h3 id=\"나쁜-코드로-치르는-대가\" style=\"position:relative;\"><a href=\"#%EB%82%98%EC%81%9C-%EC%BD%94%EB%93%9C%EB%A1%9C-%EC%B9%98%EB%A5%B4%EB%8A%94-%EB%8C%80%EA%B0%80\" aria-label=\"나쁜 코드로 치르는 대가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>나쁜 코드로 치르는 대가</h3>\n<p>나쁜 코드가 쌓일수록 팀 생산성은 떨어진다.<br>\n그러다 팀은 재설계를 요구한다.<br>\n새로운 프로젝트를 시작하기 때문에 모두가 합류하고 싶어한다.<br>\n나도 그렇다… 처음부터 시작해 진정으로 아름다운 작품을 창조할 기회니까.<br>\n재설계는 10년이 넘을 수도 있다.<br>\n그러다 보면 원년 멤버는 사라져있고, 새로운 팀원들이 새 시스템을 설계하고자 나선다.<br>\n즉, 깨끗한 코드를 만드는 노력은 전문가로서 살아남는 길이라는 사실이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">자신이 의사라 가정하자.\r\n어느 환자가 수술 전에 손을 씻지 말라고 요구한다.\r\n시간이 너무 걸리니까.\r\n확실히 환자는 상사다.\r\n하지만 의사는 단호하게 거부한다.\r\n왜? 질병과 감염의 위험은 환자보다 의사가 더 잘 아니까.\r\n환자 말을 그대로 따르는 행동은 (범죄일 뿐만 아니라) 전문가답지 못하니까.\r\n\r\n프로그래머도 마찬가지다.\r\n나쁜 코드의 위험을 이해하지 못하는 관리자 말을 그대로 따르는 행동은 전문가답지 못하다.</code></pre></div>\n<ul>\n<li>중요한 워딩 : 가독성, 명쾌한 추상화, TDD, 주의</li>\n</ul>\n<p>-> <strong>중복을 피하라, 한 기능만 수행하라, 제대로 표현하라, 작게 추상화하라</strong></p>\n<h3 id=\"보이스카우트-규칙\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EC%9D%B4%EC%8A%A4%EC%B9%B4%EC%9A%B0%ED%8A%B8-%EA%B7%9C%EC%B9%99\" aria-label=\"보이스카우트 규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>보이스카우트 규칙</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"캠프장은 처음 왔을 때보다 더 깨끗하게 해놓고 떠나라\"</code></pre></div>\n<p>지속적인 개선이야말로 전문가 정신의 본질이다.</p>\n<h3 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h3>\n<p>이 책을 통해 여러 방법을 익히고, 느껴야한다.<br>\n그렇게 체득한 후에 개선점을 생각하고, 나의 가치를 올릴 수 있는 방향으로 나아가야겠다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#intro\">Intro</a></p>\n<ul>\n<li><a href=\"#%EC%BD%94%EB%93%9C%EA%B0%80-%EC%A1%B4%EC%9E%AC%ED%95%98%EB%A6%AC%EB%9D%BC\">코드가 존재하리라</a></li>\n<li><a href=\"#%EB%82%98%EC%81%9C-%EC%BD%94%EB%93%9C\">나쁜 코드</a></li>\n<li><a href=\"#%EB%82%98%EC%81%9C-%EC%BD%94%EB%93%9C%EB%A1%9C-%EC%B9%98%EB%A5%B4%EB%8A%94-%EB%8C%80%EA%B0%80\">나쁜 코드로 치르는 대가</a></li>\n<li><a href=\"#%EB%B3%B4%EC%9D%B4%EC%8A%A4%EC%B9%B4%EC%9A%B0%ED%8A%B8-%EA%B7%9C%EC%B9%99\">보이스카우트 규칙</a></li>\n<li><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 27, 2024","title":"1장 깨끗한 코드","categories":"Clean_Code","author":"신승민","emoji":"🥭"},"fields":{"slug":"/[Clean Code] 1장 깨끗한 코드/"}},"site":{"siteMetadata":{"siteUrl":"https://maljaaa.github.io","comments":{"utterances":{"repo":"maljaaa/maljaaa.github.io"}}}}},"pageContext":{"slug":"/Database의 책임/","nextSlug":"/PRG/","prevSlug":"/[Clean Code] 1장 깨끗한 코드/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}