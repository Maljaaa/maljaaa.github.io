{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/Clean_Code","result":{"pageContext":{"currentCategory":"Clean_Code","categories":["All","Clean_Code","DB","Spring_MVC","Google_Sheets","Architecture","API"],"edges":[{"node":{"id":"e7746db5-6421-5dfc-8523-7dfbeddaf021","excerpt":"Intro 회사에서 유지보수를 하다가 끔찍한 프로젝트를 보게 되었다. 변수명과 클래스 명은 모두 1,2,3 혹은 A, B, C로 구분되어 있었다. 이런 이유 때문에 유지보수 하는 일이 너무 힘들었다. 그래서 어떻게 하면 나는 이런 코드를 짜지 않을 수 있을까? 어떻게 하면 이 코드를 좋은 코드로 바꿀 수 있을까?라는 의문점이 생겼다. 그래서 미루고 미뤄왔던 클린코드를 읽어보려고 한다. 코드가 존재하리라 요즘 기술이 발전함에 따라 코드를 자동으로 생성해주는 기술들이 생겨나기 시작했다. 그럼에도 저자는 코드가 사라질 가망이 없다고 한다. 나쁜 코드 80년대 후반 킬러 앱 하나를 구현한 회사를 이야기하면서 시작한다. 회사가 망했는데, 그 원인은 바로 나쁜 코드 탓이었다. 나쁜 코드에 발목이 잡혀 고생하는 것을 고행(Wading)이라 부른다. 나쁜 코드로 치르는 대가 나쁜 코드가 쌓일수록 팀 생산성은 떨어진다. 그러다 팀은 재설계를 요구한다. 새로운 프로젝트를 시작하기 때문에 모두가 합류…","fields":{"slug":"/[Clean Code] 1장 깨끗한 코드/"},"frontmatter":{"categories":"Clean_Code","title":"1장 깨끗한 코드","date":"August 27, 2024"}},"next":{"fields":{"slug":"/Database의 책임/"}},"previous":null}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}